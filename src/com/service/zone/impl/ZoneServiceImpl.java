package com.service.zone.impl;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Properties;import javax.naming.Context;import javax.naming.InitialContext;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import com.alibaba.fastjson.JSON;import com.common.page.Page;import com.dao.devmgt.sound.ISoundDevDao;import com.dao.linkagectl.IIpcZoneMapDao;import com.dao.linkagectl.ISoundZoneMapDao;import com.dao.mgtserver.IServerDao;import com.dao.zone.IDefenceZoneMapDao;import com.dao.zone.IIntegrationZoneMapDao;import com.dao.zone.IPositionZoneMapDao;import com.dao.zone.IPulseZoneMapDao;import com.dao.zone.IZoneDao;import com.entity.alarmmgt.AlarmDTO;import com.entity.devmgt.sound.AudioAdapter;import com.entity.efence.FenceBean;import com.entity.linkagectl.IpcZoneMap;import com.entity.linkagectl.SoundZoneMap;import com.entity.zone.DefenceZoneMapBean;import com.entity.zone.DeviceMapInterface;import com.entity.zone.IntegrationZoneMapBean;import com.entity.zone.PositionZoneMapBean;import com.entity.zone.PulseZoneMapBean;import com.entity.zone.ZoneBean;import com.nsbd.fence.IFenceManager;import com.nsbd.zone.ZoneInfo;import com.service.linkagectl.impl.OperationUIPushImp;import com.service.zone.IZoneService;public class ZoneServiceImpl implements IZoneService {	private IZoneDao zoneDao;	private IDefenceZoneMapDao defenceZoneMapDao;	private IIntegrationZoneMapDao integrationZoneMapDao;	private IPositionZoneMapDao positionZoneMapDao;	private IPulseZoneMapDao pulseZoneMapDao;	private IServerDao serverDao;	private IIpcZoneMapDao ipcZoneMapDao;	private ISoundZoneMapDao soundZoneMapDao;	private ISoundDevDao soundDevDao;	private OperationUIPushImp operationUIPushImp;	private final static Log log = LogFactory.getLog(ZoneServiceImpl.class);		/**	 * 获取摄像头个数通过预置位信息和id	 */	@Override	public int getCountIpcByIpcIdAndPreset(Map<String, Object> param) {		return zoneDao.getCountIpcByIpcIdAndPreset(param);	}	/**	 * 获取防区主设备个数	 */	@Override	public int getCountMainIpcByZoneId(Map<String, Integer> param) {		return zoneDao.getCountMainIpcByZoneId(param);	}	/**	 * 分页查询	 */	@Override	public Page<ZoneBean> queryZoneByPage(Page<ZoneBean> page) throws Exception {		return zoneDao.queryZoneByPage(page);	}	/**	 * 	 * 	 * 判断防区是否已有围栏映射	 */	@Override	public String getFenceHostIdByZoneId(Integer zoneID) throws Exception {		return zoneDao.getFenceHostIdByZoneId(zoneID);	}	/**	 * 	 * 	 * 删除围栏映射关系	 */	@Override	public void delFenceMapInfo(ZoneBean zoneBean, DeviceMapInterface device)	throws Exception {		try {			switch (zoneBean.getFenceType()) {			case 1:// 高压脉冲				PulseZoneMapBean pulseZoneMapBean = (PulseZoneMapBean) device;				pulseZoneMapBean.setZoneID(zoneBean.getZoneID());				pulseZoneMapDao.delPulseZoneMap(pulseZoneMapBean);				break;			case 2:// 一体化				IntegrationZoneMapBean integrationZoneMapBean = (IntegrationZoneMapBean) device;				integrationZoneMapBean.setZoneID(zoneBean.getZoneID());				integrationZoneMapDao						.delIntegrationZoneMap(integrationZoneMapBean);				break;			case 3:// 防区型光纤				DefenceZoneMapBean defenceZoneMapBean = (DefenceZoneMapBean) device;				defenceZoneMapBean.setZoneID(zoneBean.getZoneID());				defenceZoneMapDao.delDefenceZoneMap(defenceZoneMapBean);				break;			case 4:// 定位型光纤				PositionZoneMapBean positionZoneMapBean = (PositionZoneMapBean) device;				positionZoneMapBean.setZoneID(zoneBean.getZoneID());				positionZoneMapDao.delPositionZoneMap(positionZoneMapBean);				break;			}		} catch (Exception e) {			e.printStackTrace();		}	}	/**	 * 	 * 	 * 删除摄像头映射关系	 */	@Override	public void delIpcMapInfo(IpcZoneMap ipcZoneMap) throws Exception {		ipcZoneMapDao.delIpcZoneMapByZoneIdAndIpcId(ipcZoneMap);		// 查找ipcid值通过id		// 联动删除音频映射关系		// 查询音频信息T_SM_AUDIOADAPTER soundDevDao		AudioAdapter audioAdapter = null;		Object obj = soundDevDao.queryAdapterByIPCId(ipcZoneMap.getIpcId());		if (obj != null) {			audioAdapter = (AudioAdapter) obj;		}		// 设置音频映射信息		if (audioAdapter != null) {			SoundZoneMap soundZoneMap = new SoundZoneMap();			soundZoneMap.setZoneID(ipcZoneMap.getZoneID());			soundZoneMap.setAudioID(audioAdapter.getAudioId());			soundZoneMapDao.deleteSoundZoneMapByZoneIdAndAudioID(soundZoneMap);		}	}	/**	 * 	 * 	 * 增加摄像头映射信息以及跟摄像头对应的音频信息	 */	@Override	public String addIpcInfo(IpcZoneMap ipcZoneMap) throws Exception {				String retMsg = "success";				String ipcID = ipcZoneMap.getIpcId();		// 查询音频信息T_SM_AUDIOADAPTER soundDevDao		AudioAdapter audioAdapter = null;		Object obj = soundDevDao.queryAdapterByIPCId(ipcZoneMap.getIpcId());		if (obj != null) {			audioAdapter = (AudioAdapter) obj;		}else{			retMsg="该摄像头下没有与之对应的音频设备存在";		}		ipcZoneMapDao.save(ipcZoneMap);		// 设置音频映射信息		if (audioAdapter != null) {			SoundZoneMap soundZoneMap = new SoundZoneMap();			soundZoneMap.setZoneID(ipcZoneMap.getZoneID());			soundZoneMap.setAudioID(audioAdapter.getAudioId());			soundZoneMap.setMain(ipcZoneMap.getMainIpc());			soundZoneMap.setInfo(ipcZoneMap.getInfo());			soundZoneMapDao.save(soundZoneMap);		}		return retMsg;	}	/**	 * 	 * 	 * 增加防区主信息	 */	@Override	public void addMainZoneInfo(ZoneBean zoneBean) throws Exception {		zoneDao.addZone(zoneBean);		// 向gis界面推送消息		String jsonStr = JSON.toJSONString(zoneBean);				try {			operationUIPushImp.pullOperationEvent2GIS(zoneBean.getMgtID(), "add",					"zone", jsonStr);		} catch (Exception e) {			log.info("pullOperationEvent2GIS failed when addMainZoneInfo:"+e.getMessage());		}	}	/**	 * 	 * 	 * 增加防区设备信息(围栏映射信息)	 * 	 * 	 * 此方法功能：1.给新防区增加围栏类型信息 2.增加围栏映射信息 3.远程添加防区信息(需要先用zoneID获取防区信息)	 */	@Override	public void addDeviceInfo(ZoneBean zoneBean, DeviceMapInterface device,	List<IpcZoneMap> ipcZoneMaps,boolean flag)	throws Exception {		// 添加防区围栏类型信息(增加主信息时，防区类型为空)		if(flag){			zoneDao.modZone(zoneBean);		}else{						zoneDao.addZone(zoneBean);		}		// 增加电子围栏映射关系		if (device != null) {			switch (zoneBean.getFenceType()) {			case 1:// 高压脉冲				// 添加映射关系				pulseZoneMapDao.addPulseZoneMap((PulseZoneMapBean) device);				break;			case 2:// 一体化				// 添加映射关系				integrationZoneMapDao				.addIntegrationZoneMap((IntegrationZoneMapBean) device);				break;			case 3:// 防区型光纤				// 添加映射关系				defenceZoneMapDao						.addDefenceZoneMap((DefenceZoneMapBean) device);				break;			case 4:// 定位型光纤				// 添加映射关系				positionZoneMapDao						.addPositionZoneMap((PositionZoneMapBean) device);				break;			}		}		// 增加摄像头映射关系		/*		 * if (ipcZoneMaps != null) {		 * 		 * 		 * for (IpcZoneMap ipcZoneMap : ipcZoneMaps) {		 * 		 * 		 * ipcZoneMapDao.save(ipcZoneMap);		 * 		 * 		 * }		 * 		 * 		 * }		 */		// 增加音频映射关系(使用IPC ID查询音频信息)		/*		 * if (ipcZoneMaps != null) {		 * 		 * 		 * for (IpcZoneMap ipcZoneMap : ipcZoneMaps) {		 * 		 * 		 * String ipcID = ipcZoneMap.getIPCID();		 * 		 * 		 * //查询音频信息T_SM_AUDIOADAPTER		 * 		 * 		 * 		 * 		 * 		 * SoundZoneMap soundZoneMap = new SoundZoneMap();		 * 		 * 		 * soundZoneMap.setMain(ipcZoneMap.getMainIpc());		 * 		 * 		 * soundZoneMap.setInfo(ipcZoneMap.getInfo());		 * 		 * 		 * soundZoneMapDao.save(soundZoneMap);		 * 		 * 		 * }		 * 		 * 		 * }		 */		// 管理处增加		log.info("remote invoke addZone...");		zoneBean = zoneDao.getZoneByZoneID(zoneBean.getZoneID());		if (remoteAddZone(zoneBean, device, null) != 0) {			log.fatal("remote invoke addZone failed...");			throw new Exception();		}		// 向gis界面推送消息		String jsonStr = JSON.toJSONString(zoneBean);				try {			operationUIPushImp.pullOperationEvent2GIS(zoneBean.getMgtID(), "add",					"zone", jsonStr);		} catch (Exception e) {			log.info("pullOperationEvent2GIS failed when addMainZoneInfo:"+e.getMessage());		}		log.info("remote invoke addZone success,result=0");	}	/**	 * 管理处重启，信息处理方法	 */	@Override	public void handleRemoteJmsMsg(String mngIP) throws Exception {		// 根据ip获取管理处id		String mngID = serverDao.getMgtIdByMgtIP(mngIP);		// 通过管理处id查询防区信息		ZoneBean zb = new ZoneBean();		zb.setMgtID(mngID);		List<ZoneBean> zbs = zoneDao.getZonesByBranchIdOrMngId(zb);		for (ZoneBean zbean : zbs) {						if(zbean.getStatus().equals(2)){				zbean.setStatus(0);				zoneDao.zoneCtrl(zbean);			}			int result = -1;			// 根据设备类型进行不同处理			switch (zbean.getFenceType()) {			case 1:// 高压脉冲				PulseZoneMapBean p = pulseZoneMapDao						.getPulseZoneMapByZoneID(zbean.getZoneID());				for(int i=0;i<3;i++){										result = remoteAddZone(zbean, p, mngIP);					if(result==0){						break;					}				}				remoteZoneCtrl(zbean);				break;			case 2:// 一体化				IntegrationZoneMapBean iBean = integrationZoneMapDao						.getIntegrationZoneMapByZoneID(zbean.getZoneID());				for(int i=0;i<3;i++){					result = remoteAddZone(zbean, iBean, mngIP);					if(result==0){						break;					}				}				remoteZoneCtrl(zbean);				break;			case 3:// 防区型光纤				DefenceZoneMapBean dBean = defenceZoneMapDao						.getDefenceZoneMapByZoneID(zbean.getZoneID());				for(int i=0;i<3;i++){					result = remoteAddZone(zbean, dBean, mngIP);					if(result==0){						break;					}				}				remoteZoneCtrl(zbean);				break;			case 4:// 定位型光纤				PositionZoneMapBean pBean = positionZoneMapDao						.getPositionZoneMapByZoneID(zbean.getZoneID());				for(int i=0;i<3;i++){					result = remoteAddZone(zbean, pBean, mngIP);					if(result==0){						break;					}				}				remoteZoneCtrl(zbean);				break;			}			if(result!=0){				log.info("manager restart syn add zone fail,zone id:"+zbean.getZoneID());				try {					//delZone(zbean);					//更新成未用状态     0撤防 1布防 2未 用					Map<String,Object> paramMap = new HashMap<String,Object>();					//paramMap.put("mngID", mngID);					//paramMap.put("zoneStatus", 2);					zbean.setStatus(2);					zoneDao.zoneCtrl(zbean);					//zoneDao.updateZoneStatusByMngID(paramMap);				} catch (Exception e) {					log.fatal("delete zone failed when manager restart syn add zone,"+e.getMessage());				}			}		}	}	/**	 * 	 * 	 * 管理处添加防区信息	 * 	 * 	 * @param zoneBean	 * 	 * 	 * @param device	 * 	 * 	 * @param mngIP	 * 	 * 	 * @return	 */	private int remoteAddZone(ZoneBean zoneBean, DeviceMapInterface device,			String mngIP) {		// 根据管理处ID获取主机IP		ZoneInfo zoneInfo = null;		int result = 0;		try {			if (mngIP == null) {				mngIP = serverDao.getMgtIPByMgtID(zoneBean.getMgtID());			}			// 获取远程对象			IFenceManager fenceManager = getRemoteEJB(mngIP);			if (fenceManager == null)				return -1;			// 根据设备类型进行不同处理			switch (zoneBean.getFenceType()) {			case 1:// 高压脉冲				PulseZoneMapBean p = (PulseZoneMapBean) device;				// 将本地对象映射成远程对象				zoneInfo = new ZoneInfo(zoneBean.getZoneID(), p.getHostID(), 1);				zoneInfo.setStatus(zoneBean.getStatus());				log.info("remote invoke remoteAddZone,zoneID is:"						+ zoneInfo.getzoneID() + ",hostID is:"						+ zoneInfo.gethostID());				result = fenceManager						.addZone(zoneInfo, p.getSubZone(), 0, 0, 0);				log.info("excute remote invoke remoteAddZone result:" + result);				break;			case 2:// 一体化				IntegrationZoneMapBean integrationZoneMapBean = (IntegrationZoneMapBean) device;				// 将本地对象映射成远程对象				zoneInfo = new ZoneInfo(zoneBean.getZoneID(),				integrationZoneMapBean.getHostID(), 2);				zoneInfo.setStatus(zoneBean.getStatus());				log.info("remote invoke remoteAddZone,zoneID is:"						+ zoneInfo.getzoneID() + ",hostID is:"						+ zoneInfo.gethostID());				result = fenceManager.addZone(zoneInfo,				integrationZoneMapBean.getPoint(), 0, 0, 0);				log.info("excute remote invoke remoteAddZone result:" + result);				break;			case 3:// 防区型光纤				DefenceZoneMapBean defenceZoneMapBean = (DefenceZoneMapBean) device;				// 将本地对象映射成远程对象				zoneInfo = new ZoneInfo(zoneBean.getZoneID(),				defenceZoneMapBean.getHostID(), 3);				zoneInfo.setStatus(zoneBean.getStatus());				log.info("remote invoke remoteAddZone,zoneID is:"						+ zoneInfo.getzoneID() + ",hostID is:"						+ zoneInfo.gethostID());				result = fenceManager.addZone(zoneInfo,				defenceZoneMapBean.getInnerZoneID(), 0, 0, 0);				log.info("excute remote invoke remoteAddZone result:" + result);				break;			case 4:// 定位型光纤				PositionZoneMapBean positionZoneMapBean = (PositionZoneMapBean) device;				// 将本地对象映射成远程对象				zoneInfo = new ZoneInfo(zoneBean.getZoneID(),				positionZoneMapBean.getHostID(), 4);				zoneInfo.setStatus(zoneBean.getStatus());				log.info("remote invoke remoteAddZone,zoneID is:"						+ zoneInfo.getzoneID() + ",hostID is:"						+ zoneInfo.gethostID());				result = fenceManager.addZone(zoneInfo,				positionZoneMapBean.getChanID() + "",				positionZoneMapBean.getInnerZoneID(),				positionZoneMapBean.getStartPoint(),				positionZoneMapBean.getEndPoint());				log.info("excute remote invoke remoteAddZone result:" + result);				break;			}			return result;		} catch (Exception e) {			log.fatal("remote invoke addZone failed:" + e.getMessage());			return -1;		}	}	@Override	public void delZoneBasicInfo(Integer zoneID) {		try {			zoneDao.delZone(zoneID);		} catch (Exception e) {			log.error(e.getMessage());		}	}	@Override	public void delZone(ZoneBean zoneBean) throws Exception {		// 根据zoneID查找zone信息（传输过来的对象只有ID和类型信息）		// 需要根据设备ID查询管理处的IP		if (zoneBean == null) {			return;		}		Integer type = zoneBean.getFenceType();		String hostID = zoneDao.getFenceHostIdByZoneId(zoneBean.getZoneID());		// zoneBean = zoneDao.getZoneByZoneID(zoneBean.getZoneID());		// 先删除映射关联		// 根据设备类型进行不同处理		if (type != null) {			switch (type) {			case 1:// 高压脉冲				pulseZoneMapDao.delPulseZoneMapByZoneID(zoneBean.getZoneID());				break;			case 2:// 一体化				integrationZoneMapDao.delIntegrationZoneMapByZoneID(zoneBean				.getZoneID());				break;			case 3:// 防区型光纤				defenceZoneMapDao.delDefenceZoneMapByZoneID(zoneBean						.getZoneID());				break;			case 4:// 定位型光纤				positionZoneMapDao.delPositionZoneMapByZoneID(zoneBean						.getZoneID());				break;			}		}		// 删除摄像头映射关系		ipcZoneMapDao.delIpcZoneMapByZoneID(zoneBean.getZoneID());		// 删除音频映射关系		soundZoneMapDao.delSoundZoneMapByZoneID(zoneBean.getZoneID());		// 再删除防区信息		zoneDao.delZone(zoneBean.getZoneID());		int flag = 0;		if (type != null && hostID != null) {			// 远程管理处删除，如果状态为2则不进行远程删除			if(!(zoneBean.getStatus().equals(2))){								log.info("remote invoke delZone,zoneID IS:" + zoneBean.getZoneID());								flag = remoteDelZone(zoneBean);			}else{								log.info("don,t remote invoke delZone,zoneStatus IS:" + zoneBean.getStatus()+",zone id is:"+zoneBean.getZoneID());			}		}		if (flag == 0 || flag == -2) {			log.info("delZone success,remote invoke detele return result:"					+ flag + " ,zoneID IS:" + zoneBean.getZoneID());			// 向gis界面推送消息			Map map = new HashMap();			map.put("zoneID", zoneBean.getZoneID());			String jsonStr = JSON.toJSONString(map);			try {				operationUIPushImp.pullOperationEvent2GIS(zoneBean.getMgtID(),						"del", "zone", jsonStr);			} catch (Exception e) {				log.info("pullOperationEvent2GIS failed when delzone:"+e.getMessage());			}		} else {			log.info("remote invoke delZone failed,remote invoke detele return result:"					+ flag + " ,zoneID IS:" + zoneBean.getZoneID());			throw new Exception();		}	}	private int remoteDelZone(ZoneBean zoneBean) {		// 根据管理处ID获取主机IP		String hostIP = "";		try {			hostIP = serverDao.getMgtIPByMgtID(zoneBean.getMgtID());		} catch (Exception e) {			log.info("remoteDelZone:get mgtIp failed...");			return -1;		}		// 获取远程对象		IFenceManager fenceManager = getRemoteEJB(hostIP);		if (fenceManager == null)			return -1;		return fenceManager.delZone(zoneBean.getZoneID());	}	/**	 * 	 * 	 * 修改防区主信息	 */	@Override	public void modMainZoneInfo(ZoneBean zoneBean) throws Exception {		// 修改防区主信息		zoneDao.modZone(zoneBean);				// 向gis界面推送消息 删除		Map map = new HashMap();		map.put("zoneID", zoneBean.getZoneID());		String jsonStr = JSON.toJSONString(map);		try {			operationUIPushImp.pullOperationEvent2GIS(zoneBean.getMgtID(),					"del", "zone", jsonStr);		} catch (Exception e) {			log.info("pullOperationEvent2GIS failed when delzone:"+e.getMessage());		}		// 向gis界面推送消息 add		String jsonStr1 = JSON.toJSONString(zoneBean);				try {			operationUIPushImp.pullOperationEvent2GIS(zoneBean.getMgtID(), "add",					"zone", jsonStr1);		} catch (Exception e) {			log.info("pullOperationEvent2GIS failed when addMainZoneInfo:"+e.getMessage());		}			}	/**	 * 	 * 	 * 修改围栏映射信息	 * 	 * 	 * 作用：1.修改防区的围栏映射信息 2.修改管理处防区信息（需要先用zoneID查询防区信息）	 */	@Override	public void updateFenceMapInfo(ZoneBean zoneBean, DeviceMapInterface device)	throws Exception {		// 根据防区ID查询防区信息		// zoneBean = zoneDao.getZoneByZoneID(zoneBean.getZoneID());		switch (zoneBean.getFenceType()) {		case 1:// 高压脉冲			// 修改映射关系信息			pulseZoneMapDao.modPulseZoneMap((PulseZoneMapBean) device);			break;		case 2:// 一体化			// 修改映射关系信息			integrationZoneMapDao			.modIntegrationZoneMap((IntegrationZoneMapBean) device);			break;		case 3:// 防区型光纤			// 修改映射关系信息			defenceZoneMapDao.modDefenceZoneMap((DefenceZoneMapBean) device);			break;		case 4:// 定位型光纤			// 修改映射关系信息			positionZoneMapDao.modPositionZoneMap((PositionZoneMapBean) device);			break;		}		// 调用管理处修改		log.info("remote invoke modZone,zoneID is:" + zoneBean.getZoneID());		int flag = remoteModZone(zoneBean, device);		if (flag != 0) {			log.fatal("remote invoke modZone failed,return result is:" + flag);			throw new Exception();		}		log.info("modZone success,zoneID is:" + zoneBean.getZoneID());	}	/**	 * 	 * 	 * 修改摄像头映射信息（需要同时修改音频信息）	 */	@Override	public void updateIpcMapInfo(IpcZoneMap ipcZoneMap) throws Exception {		ipcZoneMapDao.updateIpcZoneMap(ipcZoneMap);		String ipcID = ipcZoneMap.getIpcId();		// 通过ipcID查询音频信息(获取音频ID) soundDevDao		AudioAdapter audioAdapter = (AudioAdapter) soundDevDao				.queryAdapterByIPCId(ipcZoneMap.getIpcId());		// 通过防区ID和音频ID获取音频映射信息		SoundZoneMap soundZoneMap = new SoundZoneMap();		soundZoneMap.setZoneID(ipcZoneMap.getZoneID());		soundZoneMap.setAudioID(audioAdapter.getAudioId());		soundZoneMap = zoneDao.getSoundZoneMapByZoneIdAndAudioId(soundZoneMap);		soundZoneMap.setMain(ipcZoneMap.getMainIpc());		soundZoneMap.setInfo(ipcZoneMap.getInfo());		soundZoneMapDao.updateSoundZoneMap(soundZoneMap);	}	/**	 * 	 * 	 * 整体修改防区信息（摄像头，音频）	 */	@Override	public void modZone(ZoneBean zoneBean, DeviceMapInterface device,			List<IpcZoneMap> ipcZoneMaps)	throws Exception {		// 根据防区ID查询防区信息		zoneBean = zoneDao.getZoneByZoneID(zoneBean.getZoneID());		switch (zoneBean.getFenceType()) {		case 1:// 高压脉冲			// 修改映射关系信息			pulseZoneMapDao.modPulseZoneMap((PulseZoneMapBean) device);			break;		case 2:// 一体化			// 修改映射关系信息			integrationZoneMapDao			.modIntegrationZoneMap((IntegrationZoneMapBean) device);			break;		case 3:// 防区型光纤			// 修改映射关系信息			defenceZoneMapDao.modDefenceZoneMap((DefenceZoneMapBean) device);			break;		case 4:// 定位型光纤			// 修改映射关系信息			positionZoneMapDao.modPositionZoneMap((PositionZoneMapBean) device);			break;		}		// 修改摄像头信息		if (ipcZoneMaps != null) {			for (IpcZoneMap ipcZoneMap : ipcZoneMaps) {				ipcZoneMapDao.updateIpcZoneMap(ipcZoneMap);			}		}		// 修改音频信息		if (ipcZoneMaps != null) {			for (IpcZoneMap ipcZoneMap : ipcZoneMaps) {				String ipcID = ipcZoneMap.getIpcId();				// 通过ipcID查询音频信息(获取音频ID) soundDevDao				AudioAdapter audioAdapter = (AudioAdapter) soundDevDao						.queryAdapterByIPCId(ipcZoneMap.getIpcId());				// 通过防区ID和音频ID获取音频映射信息				SoundZoneMap soundZoneMap = new SoundZoneMap();				soundZoneMap.setZoneID(ipcZoneMap.getZoneID());				soundZoneMap.setAudioID(audioAdapter.getAudioId());				soundZoneMap = zoneDao						.getSoundZoneMapByZoneIdAndAudioId(soundZoneMap);				soundZoneMap.setMain(ipcZoneMap.getMainIpc());				soundZoneMap.setInfo(ipcZoneMap.getInfo());				soundZoneMapDao.updateSoundZoneMap(soundZoneMap);			}		}	}	private int remoteModZone(ZoneBean zoneBean, DeviceMapInterface device) {		// 根据管理处ID获取主机IP		String hostIP = "";		ZoneInfo zoneInfo = null;		int result = 0;		try {			hostIP = serverDao.getMgtIPByMgtID(zoneBean.getMgtID());			// 获取远程对象			IFenceManager fenceManager = getRemoteEJB(hostIP);			if (fenceManager == null)				return -1;			// 根据设备类型进行不同处理			switch (zoneBean.getFenceType()) {			case 1:// 高压脉冲				PulseZoneMapBean p = (PulseZoneMapBean) device;				// 将本地对象映射成远程对象				zoneInfo = new ZoneInfo(zoneBean.getZoneID(), p.getHostID(), 1);				zoneInfo.setStatus(zoneBean.getStatus());				log.info("remote invoke modZone,zoneID is:"						+ zoneInfo.getzoneID() + ",hostID IS:"						+ zoneInfo.gethostID());				result = fenceManager						.modZone(zoneInfo, p.getSubZone(), 0, 0, 0);				break;			case 2:// 一体化				IntegrationZoneMapBean integrationZoneMapBean = (IntegrationZoneMapBean) device;				// 将本地对象映射成远程对象				zoneInfo = new ZoneInfo(zoneBean.getZoneID(),				integrationZoneMapBean.getHostID(), 2);				zoneInfo.setStatus(zoneBean.getStatus());				log.info("remote invoke modZone,zoneID is:"						+ zoneInfo.getzoneID() + ",hostID IS:"						+ zoneInfo.gethostID());				result = fenceManager.modZone(zoneInfo,				integrationZoneMapBean.getPoint(), 0, 0, 0);				break;			case 3:// 防区型光纤				DefenceZoneMapBean defenceZoneMapBean = (DefenceZoneMapBean) device;				// 将本地对象映射成远程对象				zoneInfo = new ZoneInfo(zoneBean.getZoneID(),				defenceZoneMapBean.getHostID(), 3);				zoneInfo.setStatus(zoneBean.getStatus());				log.info("remote invoke modZone,zoneID is:"						+ zoneInfo.getzoneID() + ",hostID IS:"						+ zoneInfo.gethostID());				result = fenceManager.modZone(zoneInfo,				defenceZoneMapBean.getInnerZoneID(), 0, 0, 0);				break;			case 4:// 定位型光纤				PositionZoneMapBean positionZoneMapBean = (PositionZoneMapBean) device;				// 将本地对象映射成远程对象				zoneInfo = new ZoneInfo(zoneBean.getZoneID(),				positionZoneMapBean.getHostID(), 4);				zoneInfo.setStatus(zoneBean.getStatus());				log.info("remote invoke modZone,zoneID is:"						+ zoneInfo.getzoneID() + ",hostID IS:"						+ zoneInfo.gethostID());				result = fenceManager.modZone(zoneInfo,				positionZoneMapBean.getChanID() + "",				positionZoneMapBean.getInnerZoneID(),				positionZoneMapBean.getStartPoint(),				positionZoneMapBean.getEndPoint());				break;			}			return result;		} catch (Exception e) {			log.info("remote invoke modZone failed,zoneID is:"					+ zoneBean.getZoneID() + ",fail message:" + e.getMessage());			return -1;		}	}	/**	 * 	 * 	 * 重载的方法	 * 	 * 	 * 专给gis提供接口	 */	@Override	public void zoneCtrl(Integer zoneID, Integer status) throws Exception {		ZoneBean zoneBean = new ZoneBean();		zoneBean.setZoneID(zoneID);		// 根据zoneID查找zone信息（传输过来的对象只有ID和类型信息）		// 需要根据设备ID查询管理处的IP		zoneBean = zoneDao.getZoneByZoneID(zoneID);				zoneBean.setStatus(status);		// 本地防区控制		zoneDao.zoneCtrl(zoneBean);		// 远程防区控制		log.info("remote invoke zoneCtrl:gis");		if (remoteZoneCtrl(zoneBean) != 0) {		//if (false) {			log.info("remote invoke zoneCtrl failed:gis");			throw new Exception();		} else {			log.info("remote invoke zoneCtrl success:0:gis");			// 向mc界面推送消息			String message = zoneBean.getZoneID()+":"+zoneBean.getStatus();			try {				operationUIPushImp.pullOperationEvent2MC(zoneBean.getMgtID(),						"change", "zone", message);			} catch (Exception e) {				log.info("gis=pullOperationEvent2MC failed when zoneCtrl:"+e.getMessage());			}		}	}	@Override	public void zoneCtrl(ZoneBean zoneInfo) throws Exception {		// 根据zoneID查找zone信息（传输过来的对象只有ID和类型信息）		// 需要根据设备ID查询管理处的IP		ZoneBean zoneBean = zoneDao.getZoneByZoneID(zoneInfo.getZoneID());		// 检查该防区是否有关联电子围栏，没有则无法进行撤/布防操作		String hostID = zoneDao.getFenceHostIdByZoneId(zoneBean.getZoneID());		if (hostID == null) {			log.info("===========zoneCtrl failed:not release fence info.============");			throw new Exception();		}		// 本地防区控制		zoneDao.zoneCtrl(zoneInfo);		// 远程防区控制		zoneBean.setStatus(zoneInfo.getStatus());		log.info("remote invoke zoneCtrl,zoneID is:" + zoneInfo.getZoneID());		if (remoteZoneCtrl(zoneBean) != 0) {			log.info("remote invoke zoneCtrl failed...");			throw new Exception();		} else {			log.info("remote invoke zoneCtrl success:0");			// 向gis界面推送消息			Map map = new HashMap();			map.put("zoneID", zoneBean.getZoneID());			map.put("stat", zoneBean.getStatus().equals(0) ? "offline"					: "ready");			String jsonStr = JSON.toJSONString(map);						try {				operationUIPushImp.pullOperationEvent2GIS(zoneBean.getMgtID(),						"change", "zone", jsonStr);			} catch (Exception e) {								log.info("pullOperationEvent2GIS failed when zoneCtrl:"+e.getMessage());			}		}	}	private int remoteZoneCtrl(ZoneBean zoneBean) {		// 根据管理处ID获取主机IP		String hostIP = "";		try {			hostIP = serverDao.getMgtIPByMgtID(zoneBean.getMgtID());		} catch (Exception e) {			log.info("remoteZoneCtrl:get mgtIp failed..." + e.getMessage());			return -1;		}		// 获取远程对象		IFenceManager fenceManager = getRemoteEJB(hostIP);		if (fenceManager == null)			return -1;		return fenceManager.defenceCtrl(zoneBean.getZoneID(),				zoneBean.getStatus());	}	// 远程调用EJB对象 JBOSS4	private IFenceManager getRemoteEJB(String hostIP) {		try {			log.info("=====================remote manager ip:  " + hostIP					+ " ======================");			if (hostIP == null) {				log.info("manager ip is null.....");				return null;			}			Properties properties = new Properties();			properties.setProperty(Context.INITIAL_CONTEXT_FACTORY,			"org.jnp.interfaces.NamingContextFactory");			properties.put(Context.URL_PKG_PREFIXES,			"org.jboss.naming:org.jnp.interfaces");			properties.setProperty(Context.PROVIDER_URL, hostIP + ":1099");			Context ctx = new InitialContext(properties);			IFenceManager fenceManager = (IFenceManager) ctx			.lookup("FenceManager/remote");			return fenceManager;		} catch (Exception e) {			log.error("the manager connect failed,fail message:"					+ e.getMessage());			return null;		}	}	// 远程调用EJB对象 JBOSS7.1.1	/*	 * private IZoneSync getRemoteEJBObj(String hostIP) {	 * 	 * 	 * 	 * 	 * 	 * // 动态连接jboss的ejb	 * 	 * 	 * ConfigUtil.write("remote.connection.default.host", hostIP,	 * 	 * 	 * "jboss-ejb-client.properties");	 * 	 * 	 * try {	 * 	 * 	 * Properties properties = new Properties();	 * 	 * 	 * properties.put(Context.URL_PKG_PREFIXES,	 * 	 * 	 * "org.jboss.ejb.client.naming");	 * 	 * 	 * Context ctx = new InitialContext(properties);	 * 	 * 	 * 	 * 	 * 	 * final String appName = ConfigUtil.getPropertyValue("appName",	 * 	 * 	 * "EJBConfig.properties");	 * 	 * 	 * final String moduleName = ConfigUtil.getPropertyValue("moduleName",	 * 	 * 	 * "EJBConfig.properties");	 * 	 * 	 * final String distinctName = ConfigUtil.getPropertyValue(	 * 	 * 	 * "distinctName", "EJBConfig.properties");	 * 	 * 	 * 	 * 	 * 	 * String addr = "ejb:" + appName + "/" + moduleName + "/"	 * 	 * 	 * + distinctName + "/ZoneSync!com.nsbd.zone.IZoneSync";	 * 	 * 	 * 	 * 	 * 	 * log.info("lookup FenceManager:addr==>" + addr);	 * 	 * 	 * IZoneSync zoneSync = (IZoneSync) ctx.lookup(addr);	 * 	 * 	 * return zoneSync;	 * 	 * 	 * } catch (Exception e) {	 * 	 * 	 * log.info("lookup FenceManager failed:" + e);	 * 	 * 	 * return null;	 * 	 * 	 * }	 * 	 * 	 * }	 */	public void addDefenceZoneMap(DefenceZoneMapBean defenceZoneMapBean)	throws Exception {		defenceZoneMapDao.addDefenceZoneMap(defenceZoneMapBean);	}	public void addPositionZoneMap(PositionZoneMapBean positionZoneMapBean)	throws Exception {		positionZoneMapDao.addPositionZoneMap(positionZoneMapBean);	}	public void addIntegrationZoneMap(	IntegrationZoneMapBean integrationZoneMapBean) throws Exception {		integrationZoneMapDao.addIntegrationZoneMap(integrationZoneMapBean);	}	public void addPulseZoneMap(PulseZoneMapBean pulseZoneMapBean)	throws Exception {		pulseZoneMapDao.addPulseZoneMap(pulseZoneMapBean);	}	public void addIpcZoneMap(IpcZoneMap ipcZoneMap) throws Exception {		ipcZoneMapDao.save(ipcZoneMap);	}	public void addSoundZoneMap(SoundZoneMap soundZoneMap)	throws Exception {		soundZoneMapDao.save(soundZoneMap);	}	public List<Integer> getAllZoneID() throws Exception {		return zoneDao.getAllZoneID();	}	public ZoneBean getZoneByID(Integer zoneID) throws Exception {		return zoneDao.getZoneByZoneID(zoneID);	}	public PulseZoneMapBean getPulseZoneMapByZoneID(Integer zoneID)	throws Exception {		return pulseZoneMapDao.getPulseZoneMapByZoneID(zoneID);	}	public IntegrationZoneMapBean getIntegrationZoneMapByZoneID(Integer zoneID)	throws Exception {		return integrationZoneMapDao.getIntegrationZoneMapByZoneID(zoneID);	}	public DefenceZoneMapBean getDefenceZoneMapByZoneID(Integer zoneID)	throws Exception {		return defenceZoneMapDao.getDefenceZoneMapByZoneID(zoneID);	}	public PositionZoneMapBean getPositionZoneMapByZoneID(Integer zoneID)	throws Exception {		return positionZoneMapDao.getPositionZoneMapByZoneID(zoneID);	}	public List<IpcZoneMap> getIpcZoneMapsByZoneID(Integer zoneID)	throws Exception {		return ipcZoneMapDao.getIpcZoneMapsByZoneID(zoneID);	}	/**	 * 	 * 	 * 通过防区ID查询告警信息	 */	public List<AlarmDTO> queryAlarmsByZoneID(Integer zoneID) throws Exception {		return zoneDao.queryAlarmsByZoneID(zoneID);	}	/**	 * 	 * 	 * 条件查询围栏主机ID	 */	public List<String> getHostIDs(FenceBean fenceBean) throws Exception {		return zoneDao.getHostIDs(fenceBean);	}	/**	 * 	 * 	 * 通过用户ID查询摄像头ID集	 */	@Override	public List<String> getIpcIDsByOrgID(Map paramMap) throws Exception {		return zoneDao.getIpcIDsByOrgID(paramMap);	}	/**	 * 	 * 	 * 查询防区映射通过防区ID和围栏主机ID	 */	public DefenceZoneMapBean getDefenceZoneMapByZoneIdAndHostId(	DefenceZoneMapBean defenceZoneMapBean) throws Exception {		return zoneDao.getDefenceZoneMapByZoneIdAndHostId(defenceZoneMapBean);	}	/**	 * 	 * 	 * 查询定位型映射通过防区ID和围栏主机ID	 */	public PositionZoneMapBean getPositionZoneMapByZoneIdAndHostId(	PositionZoneMapBean positionZoneMapBean) throws Exception {		return zoneDao.getPositionZoneMapByZoneIdAndHostId(positionZoneMapBean);	}	/**	 * 	 * 	 * 查询一体化映射通过防区ID和围栏主机ID	 */	@Override	public IntegrationZoneMapBean getIntegrationZoneMapByZoneIdAndHostId(	IntegrationZoneMapBean integrationZoneMapBean) throws Exception {		return zoneDao				.getIntegrationZoneMapByZoneIdAndHostId(integrationZoneMapBean);	}	/**	 * 	 * 	 * 查询高压脉冲映射通过防区ID和围栏主机ID	 */	@Override	public PulseZoneMapBean getPulseZoneMapByZoneIdAndHostId(	PulseZoneMapBean pulseZoneMapBean) throws Exception {		return zoneDao.getPulseZoneMapByZoneIdAndHostId(pulseZoneMapBean);	}	/**	 * 	 * 	 * 查询摄像头映射通过防区ID和摄像头ID	 */	@Override	public IpcZoneMap getIpcZoneMapByZoneIdAndIpcId(IpcZoneMap ipcZoneMap)	throws Exception {		return zoneDao.getIpcZoneMapByZoneIdAndIpcId(ipcZoneMap);	}	/**	 * 	 * 	 * 查询音频映射通过防区ID和摄像头ID	 */	@Override	public SoundZoneMap getSoundZoneMapByZoneIdAndAudioId(	SoundZoneMap soundZoneMap) throws Exception {		return zoneDao.getSoundZoneMapByZoneIdAndAudioId(soundZoneMap);	}	/**	 * 	 * 	 * 根据用户机构等级过滤防区信息（根据分公司或管理处ID）	 */	@Override	public List<ZoneBean> getZonesByBranchIdOrMngId(ZoneBean zoneBean)	throws Exception {		List<ZoneBean> tempList = new ArrayList<ZoneBean>();				List<ZoneBean> lz =zoneDao.getZonesByBranchIdOrMngId(zoneBean);				for(ZoneBean zb:lz){			if(!(zb.getStatus().equals(2))){				tempList.add(zb);			}		}		if(tempList.size()==0){			return null;		}else{						return tempList;		}	}	/**	 * 	 * 	 * 根据围栏类型获取围栏idS	 */	@Override	public List<String> findHostIDsByFenceType(Map paramMap) throws Exception {		return zoneDao.findHostIDsByFenceType(paramMap);	}	public IZoneDao getZoneDao() {		return zoneDao;	}	public void setZoneDao(IZoneDao zoneDao) {		this.zoneDao = zoneDao;	}	public IDefenceZoneMapDao getDefenceZoneMapDao() {		return defenceZoneMapDao;	}	public void setDefenceZoneMapDao(IDefenceZoneMapDao defenceZoneMapDao) {		this.defenceZoneMapDao = defenceZoneMapDao;	}	public IIntegrationZoneMapDao getIntegrationZoneMapDao() {		return integrationZoneMapDao;	}	public void setIntegrationZoneMapDao(	IIntegrationZoneMapDao integrationZoneMapDao) {		this.integrationZoneMapDao = integrationZoneMapDao;	}	public IPositionZoneMapDao getPositionZoneMapDao() {		return positionZoneMapDao;	}	public void setPositionZoneMapDao(IPositionZoneMapDao positionZoneMapDao) {		this.positionZoneMapDao = positionZoneMapDao;	}	public IPulseZoneMapDao getPulseZoneMapDao() {		return pulseZoneMapDao;	}	public void setPulseZoneMapDao(IPulseZoneMapDao pulseZoneMapDao) {		this.pulseZoneMapDao = pulseZoneMapDao;	}	public IServerDao getServerDao() {		return serverDao;	}	public void setServerDao(IServerDao serverDao) {		this.serverDao = serverDao;	}	public IIpcZoneMapDao getIpcZoneMapDao() {		return ipcZoneMapDao;	}	public void setIpcZoneMapDao(IIpcZoneMapDao ipcZoneMapDao) {		this.ipcZoneMapDao = ipcZoneMapDao;	}	public ISoundZoneMapDao getSoundZoneMapDao() {		return soundZoneMapDao;	}	public void setSoundZoneMapDao(ISoundZoneMapDao soundZoneMapDao) {		this.soundZoneMapDao = soundZoneMapDao;	}	public ISoundDevDao getSoundDevDao() {		return soundDevDao;	}	public void setSoundDevDao(ISoundDevDao soundDevDao) {		this.soundDevDao = soundDevDao;	}	public OperationUIPushImp getOperationUIPushImp() {		return operationUIPushImp;	}	public void setOperationUIPushImp(OperationUIPushImp operationUIPushImp) {		this.operationUIPushImp = operationUIPushImp;	}}