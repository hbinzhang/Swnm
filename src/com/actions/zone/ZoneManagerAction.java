package com.actions.zone;import java.io.File;import java.util.ArrayList;import java.util.HashMap;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;import org.apache.commons.logging.Log;import org.apache.commons.logging.LogFactory;import com.actions.BaseAction;import com.common.DataCache;import com.common.page.Page;import com.entity.alarmmgt.AlarmDTO;import com.entity.authmgt.Session;import com.entity.common.ExcelConfigInfo;import com.entity.devmgt.sound.SoundDev;import com.entity.efence.FenceBean;import com.entity.linkagectl.IpcZoneMap;import com.entity.linkagectl.SoundZoneMap;import com.entity.videomonitor.TVmIpc;import com.entity.zone.DefenceZoneMapBean;import com.entity.zone.IntegrationZoneMapBean;import com.entity.zone.PositionZoneMapBean;import com.entity.zone.PulseZoneMapBean;import com.entity.zone.ZoneBean;import com.service.efence.IFenceService;import com.service.logmgt.IOperationLogService;import com.service.sounddev.database.ISoundDevservice;import com.service.videomonitor.DeviceManageIPCService;import com.service.zone.IZoneService;import com.util.zone.ExcelMutilSheetUtil;import com.util.zone.ZoneConvertUtil;import common.page.AjaxObject;@SuppressWarnings("serial")public class ZoneManagerAction extends BaseAction {	private final static Log log = LogFactory.getLog(ZoneManagerAction.class);	private IZoneService zoneManagerService;	private IFenceService fenceManagerService;		private DeviceManageIPCService deviceManageIPCService;		private ISoundDevservice soundDevservice;	private IOperationLogService operationLogService;	private ZoneBean zoneBean;	private DefenceZoneMapBean defenceZoneMapBean;	private IntegrationZoneMapBean integrationZoneMapBean;	private PositionZoneMapBean positionZoneMapBean;	private PulseZoneMapBean pulseZoneMapBean;	private List<IpcZoneMap> ipcZoneMaps;	private IpcZoneMap ipcZoneMap;	private Page<ZoneBean> page;	private String zoneIDs;	private String jsonStr;	// 文件上传	private File zone;	private String zoneFileName;	private String zoneContentType;	// 电子围栏ID集	private List<String> hostIDs;	// 摄像头ID集	private List<String> ipcIDs;	private List<AlarmDTO> alarms;	private AjaxObject ajaxObject;	// 存放excel文件出错的行数	Map<String, Object> errorMessage;	Map<String, Object> insertErrorMsg;	// 普通请求 返回error提示信息	private String errorMeg;		 public String checkPreSetUnique(){		  		  Integer preset = Integer.valueOf(getRequest().getParameter("fieldValue"));		  String fieldId = getRequest().getParameter("fieldId");		  Map<String,Object> param = new HashMap<String,Object>();		  param.put("point", preset);		  param.put("ipcId", ipcZoneMap.getIpcId());		  		  int count =zoneManagerService.getCountIpcByIpcIdAndPreset(param);		  		  if(count>0){		   ajaxObject = new AjaxObject(0, "",fieldId);		   return ERROR;		  }else{		    ajaxObject = new AjaxObject(1, "",fieldId);		    return SUCCESS;		  }	 }		 public String checkMainDevUnique(){		  		  Integer mainIpc = Integer.valueOf(getRequest().getParameter("fieldValue"));		  String fieldId = getRequest().getParameter("fieldId");		  Map<String,Integer> param = new HashMap<String,Integer>();		  param.put("mainIpc", mainIpc);		  param.put("zoneID", zoneBean.getZoneID());		  		  if(mainIpc.equals(1)){		   int count =zoneManagerService.getCountMainIpcByZoneId(param);		   if(count>0){		    ajaxObject = new AjaxObject(0, "防区只能有一个主摄像头设备",fieldId);		    return ERROR;		   }else{		    ajaxObject = new AjaxObject(1, "",fieldId);		    return SUCCESS;		   }		  }else{		   ajaxObject = new AjaxObject(1, "",fieldId);		   return SUCCESS;		  }		 }	/**	 * 	 * 删除摄像头映射关系 根据id	 * 	 * @return	 */	public String delIpcMapInfo() {		int result = 1;		StringBuffer msg = new StringBuffer("删除摄像头映射:");		try {			zoneManagerService.delIpcMapInfo(ipcZoneMap);		} catch (Exception e) {			log.error("delIpcMapInfo failed:"+e.getMessage());			result = 0;			msg.append("失败！");			// 记录操作日志			operationLogService.createOperationLog("delIpcMapInfo",					ipcZoneMap.getIpcId(), result, msg.toString());			ajaxObject = new AjaxObject(result, "删除失败");			return ERROR;		}		msg.append("成功！");		// 记录操作日志		try {			operationLogService.createOperationLog("delIpcMapInfo",					ipcZoneMap.getIpcId(), result, msg.toString());			ajaxObject = new AjaxObject(result, null);		} catch (Exception e) {			log.info("operationLogService.createOperationLog failed:"					+ e.getMessage());		}		return SUCCESS;	}	/**	 * 	 * 删除围栏映射信息 根据防区id和hostID	 */	/*	 * public String delFenceMapInfo() {	 * 	 * 	 * 	 * int result = 1;	 * 	 * StringBuffer msg = new StringBuffer("删除电子围栏映射:");	 * 	 * 	 * 	 * // 根据zoneID查询防区信息	 * 	 * try {	 * 	 * zoneBean = zoneManagerService.getZoneByID(zoneBean.getZoneID());	 * 	 * switch (zoneBean.getFenceType()) {	 * 	 * 	 * 	 * case 1:// 高压脉冲	 * 	 * zoneManagerService.delFenceMapInfo(zoneBean, pulseZoneMapBean);	 * 	 * break;	 * 	 * case 2:// 一体化	 * 	 * zoneManagerService.delFenceMapInfo(zoneBean,	 * 	 * integrationZoneMapBean);	 * 	 * break;	 * 	 * case 3:// 防区型光纤	 * 	 * zoneManagerService	 * 	 * .delFenceMapInfo(zoneBean, defenceZoneMapBean);	 * 	 * break;	 * 	 * case 4:// 定位型光纤	 * 	 * zoneManagerService.delFenceMapInfo(zoneBean,	 * 	 * positionZoneMapBean);	 * 	 * break;	 * 	 * }	 * 	 * 	 * 	 * } catch (Exception e) {	 * 	 * 	 * 	 * e.printStackTrace();	 * 	 * 	 * 	 * result = 0;	 * 	 * msg.append("失败！");	 * 	 * // 记录操作日志	 * 	 * operationLogService.createOperationLog("delFenceMapInfo", zoneBean	 * 	 * .getZoneID().toString(), result, msg.toString());	 * 	 * 	 * 	 * ajaxObject = new AjaxObject(result, null);	 * 	 * return ERROR;	 * 	 * 	 * 	 * }	 * 	 * 	 * 	 * msg.append("成功！");	 * 	 * // 记录操作日志	 * 	 * operationLogService.createOperationLog("delFenceMapInfo", zoneBean	 * 	 * .getZoneID().toString(), result, msg.toString());	 * 	 * 	 * 	 * ajaxObject = new AjaxObject(result, null);	 * 	 * return SUCCESS;	 * 	 * }	 */	/**	 * 	 * 增加围栏映射信息	 * 	 * 	 * 	 * @return	 */	public String addFenceInfo() {		int result = 1;		StringBuffer msg = new StringBuffer("增加电子围栏映射:");		// 根据zoneID查询防区主信息		int fenceType = zoneBean.getFenceType();		String hID = zoneBean.getHostID();		Map datas = DataCache.getInstance().dataMap;		try {			// 增加之前首先判断该防区是否已有围栏的映射（无：添加 有：不添加）			String hostid = zoneManagerService.getFenceHostIdByZoneId(zoneBean			.getZoneID());			if (hostid != null) {				result = 0;				msg.append("防区已有围栏映射,无法添加！");				// 记录操作日志				operationLogService.createOperationLog("addFenceInfo", zoneBean				.getZoneID().toString(), result, msg.toString());				ajaxObject = new AjaxObject(result, "防区已有围栏映射");				datas.remove(zoneBean.getZoneID());				return ERROR;			}			zoneBean = (ZoneBean) datas.get(zoneBean.getZoneID());			zoneBean.setFenceType(fenceType);			switch (zoneBean.getFenceType()) {			case 1:// 高压脉冲				System.out.println(pulseZoneMapBean.getSubZone());				pulseZoneMapBean.setZoneID(zoneBean.getZoneID());				pulseZoneMapBean.setHostID(hID);				zoneManagerService.addDeviceInfo(zoneBean, pulseZoneMapBean,				ipcZoneMaps,false);				break;			case 2:// 一体化				integrationZoneMapBean.setZoneID(zoneBean.getZoneID());				integrationZoneMapBean.setHostID(hID);				zoneManagerService.addDeviceInfo(zoneBean,				integrationZoneMapBean, ipcZoneMaps,false);				break;			case 3:// 防区型光纤				defenceZoneMapBean.setZoneID(zoneBean.getZoneID());				defenceZoneMapBean.setHostID(hID);				zoneManagerService.addDeviceInfo(zoneBean, defenceZoneMapBean,				ipcZoneMaps,false);				break;			case 4:// 定位型光纤				positionZoneMapBean.setZoneID(zoneBean.getZoneID());				positionZoneMapBean.setHostID(hID);				zoneManagerService.addDeviceInfo(zoneBean, positionZoneMapBean,				ipcZoneMaps,false);				break;			}		} catch (Exception e) {			log.info("addFenceInfo failed:" + e.getMessage());			result = 0;			msg.append("失败！");			// 记录操作日志			operationLogService.createOperationLog("addFenceInfo", zoneBean			.getZoneID().toString(), result, msg.toString());			ajaxObject = new AjaxObject(result, "管理处添加失败");			datas.remove(zoneBean.getZoneID());			return ERROR;		}		msg.append("成功！");		// 记录操作日志		try {			operationLogService.createOperationLog("addFenceInfo", zoneBean					.getZoneID().toString(), result, msg.toString());		} catch (Exception e) {			log.error("createOperationLog failed when addFenceInfo:"+e.getMessage());		}		ajaxObject = new AjaxObject(result, "添加成功");		return SUCCESS;	}	/**	 * 	 * 增加摄像头映射信息	 */	public String addIpcInfo() {		int result = 1;		StringBuffer msg = new StringBuffer("增加摄像头映射:");		ipcZoneMap.setZoneID(zoneBean.getZoneID());		try {			// 1.验证是否已添加了该摄像头映射			IpcZoneMap ipcMap = zoneManagerService			.getIpcZoneMapByZoneIdAndIpcId(ipcZoneMap);			if (ipcMap != null) {				result = 0;				msg.append("IPC 已存在！");				// 记录操作日志				operationLogService.createOperationLog("addIpcInfo",				ipcZoneMap.getIpcId(), result, msg.toString());				ajaxObject = new AjaxObject(result, "IPC 已存在！");				return ERROR;			}			// 2.执行添加			String retMessage =  zoneManagerService.addIpcInfo(ipcZoneMap);			/*if(retMessage.equals("success")){*/			msg.append("成功！");			// 记录操作日志			try {				operationLogService.createOperationLog("addIpcInfo",												ipcZoneMap.getIpcId(), result, msg.toString());			} catch (Exception e) {				log.error("createOperationLog failed when addIpcInfo:"+e.getMessage());			}			ajaxObject = new AjaxObject(result, null);			return SUCCESS;			/*}else{				result = 0;				msg.append("失败:");				// 记录操作日志				operationLogService.createOperationLog("addIpcInfo",				ipcZoneMap.getIpcId(), result, msg.toString()+retMessage);				ajaxObject = new AjaxObject(result, retMessage);				return ERROR;			}*/		} catch (Exception e) {			log.info("addIpcInfo failed:" + e.getMessage());			result = 0;			msg.append("失败！");			// 记录操作日志			operationLogService.createOperationLog("addIpcInfo",			ipcZoneMap.getIpcId(), result, msg.toString());			ajaxObject = new AjaxObject(result, "添加失败");			return ERROR;		}	}	/**	 * 	 * 通过围栏类型获取电子围栏ids 根据权限	 * 	 * 	 * 	 * @return	 */	public String findHostIDsByFenceType() {		Map paramMap = new HashMap();		// 获取session		/*		 * Session s = (Session)		 * getRequest().getSession().getAttribute("session");		 * 		 * int level = 0;		 * 		 * if (s != null) {		 * 		 * level = Integer.valueOf(s.getLev());		 * 		 * }		 * 		 * switch (level) {		 * 		 * case 0:		 * 		 * break;		 * 		 * case 1:		 * 		 * // 参数：分公司ID		 * 		 * String branchID = s.getOrgIdAndNames().getSubCompanys().get(0)		 * 		 * .getId();		 * 		 * paramMap.put("subComID", branchID);		 * 		 * break;		 * 		 * case 2:		 * 		 * // 参数：管理处ID		 * 		 * String mID = s.getOrgIdAndNames().getManagements().get(0).getId();		 * 		 * paramMap.put("mntMentID", mID);		 * 		 * break;		 * 		 * }		 */		try {			paramMap.put("fenceType", zoneBean.getFenceType()); 			ZoneBean zb = (ZoneBean) DataCache.getInstance().dataMap					.get(zoneBean.getZoneID());			paramMap.put("subComID", zb.getBranchID());			paramMap.put("mntMentID", zb.getMgtID());			hostIDs = zoneManagerService.findHostIDsByFenceType(paramMap);			ajaxObject = new AjaxObject(1, hostIDs);		} catch (Exception e) {			log.error("findHostIDsByFenceType failed:"+e.getMessage());			return ERROR;		}		return SUCCESS;	}	/**	 * 	 * 跳转新增页面	 */	public String goAddZone() {		return SUCCESS;	}	/**	 * 	 * 查询告警信息	 */	public String queryAlarmInfo() {		try {			// 通过防区ID查询告警信息			alarms = zoneManagerService.queryAlarmsByZoneID(zoneBean			.getZoneID());			ajaxObject = new AjaxObject(1, alarms);		} catch (Exception e) {			ajaxObject = new AjaxObject(0, null);			log.error("queryAlarmsByZoneID failed:"+e.getMessage());			return ERROR;		}		return SUCCESS;	}	/**	 * 	 * 根据ID查询防区详细信息	 */	public String queryZoneDetailByID() {		Map paramMap = new HashMap();		/*		 * int lev = 0;		 * 		 * if (s != null) {		 * 		 * lev = Integer.valueOf(s.getLev());		 * 		 * }		 * 		 * 		 * 		 * switch (lev) {		 * 		 * case 0:		 * 		 * break;		 * 		 * case 1:		 * 		 * // 参数：分公司ID		 * 		 * String branchID = s.getOrgIdAndNames().getSubCompanys().get(0)		 * 		 * .getId();		 * 		 * paramMap.put("branchID", branchID);		 * 		 * break;		 * 		 * case 2:		 * 		 * // 参数：管理处ID		 * 		 * String mID = s.getOrgIdAndNames().getManagements().get(0)		 * 		 * .getId();		 * 		 * paramMap.put("mngID", mID);		 * 		 * break;		 * 		 * }		 */		try {			zoneBean = zoneManagerService.getZoneByID(zoneBean.getZoneID());			Integer fType = zoneBean.getFenceType();			if (fType != null) {				switch (fType) {				case 1:// 高压脉冲					pulseZoneMapBean = zoneManagerService					.getPulseZoneMapByZoneID(zoneBean.getZoneID());					break;				case 2:// 一体化					integrationZoneMapBean = zoneManagerService					.getIntegrationZoneMapByZoneID(zoneBean.getZoneID());					break;				case 3:// 防区型光纤					defenceZoneMapBean = zoneManagerService					.getDefenceZoneMapByZoneID(zoneBean.getZoneID());					break;				case 4:// 定位型光纤					positionZoneMapBean = zoneManagerService					.getPositionZoneMapByZoneID(zoneBean.getZoneID());					break;				}			}			// 通过该防区下的机构信息查询摄像头ID			paramMap.put("branchID", zoneBean.getBranchID());			paramMap.put("mngID", zoneBean.getMgtID());			ipcIDs = zoneManagerService.getIpcIDsByOrgID(paramMap);			// 查询防区下的摄像头信息			ipcZoneMaps = zoneManagerService.getIpcZoneMapsByZoneID(zoneBean			.getZoneID());		} catch (Exception e) {			log.error("queryZoneDetailByID failed:"+e.getMessage());			return ERROR;		}		return SUCCESS;	}	/**	 * 	 * 分页查询页面	 */	@SuppressWarnings("unused")	public String queryZoneByPage() { // 1.获取用户信息，不同的用户显示不同的信息		int level = 0;		Session s = (Session) getRequest().getSession().getAttribute("session");		/**		 * 		 * 2.根据用户信息查询公司信息和管理处信息： 总公司用户：查询所有分公司和所有管理处 分公司用户：查询分公司和分公司所属所有管理处		 * 		 * 管理处用户：管理处所在分公司和本管理处		 */		// 3.查询防区信息		try {			if (page == null) {				page = new Page<ZoneBean>(pageNow, pageSize);			}			// 权限			if (zoneBean == null) {				zoneBean = new ZoneBean();				if (s != null) {					level = Integer.valueOf(s.getLev());				}				switch (level) {				case 0:					break;				case 1:					// 参数：分公司ID					String branchID = s.getOrgIdAndNames().getSubCompanys()					.get(0).getId();					zoneBean.setBranchID(branchID);					break;				case 2:					// 参数：管理处ID					String mID = s.getOrgIdAndNames().getManagements().get(0)					.getId();					zoneBean.setMgtID(mID);					break;				}			}			zoneBean.init();			page.setObjCondition(zoneBean);			page = zoneManagerService.queryZoneByPage(page);		} catch (Exception e) {			log.error("queryZoneByPage failed:"+e.getMessage());		}		return SUCCESS;	}	/**	 * 	 * 判断zoneID是否已经存在 ajax请求	 */	public String isIdRepeat() {		try {			ZoneBean zb = zoneManagerService.getZoneByID(zoneBean.getZoneID());			if (zb == null) {				ajaxObject = new AjaxObject(1, null);				return SUCCESS;			} else {				ajaxObject = new AjaxObject(0, null);				return ERROR;			}		} catch (Exception e) {			log.error("zone isIdRepeat:"+e.getMessage());			ajaxObject = new AjaxObject(0, null);			return ERROR;		}	}	/**	 * 	 * 增加防区主信息 zonetype:1 PULSE 2 INTEGRATION 3 DEFENCE 4 POSITION	 * 	 * 查询摄像头信息根据用户所属机构信息。	 * 	 * 	 * 	 * @return	 */	/*	 * public String addZone() {	 * 	 * 	 * 	 * Map paramMap = new HashMap();	 * 	 * int result = 1;	 * 	 * StringBuffer msg = new StringBuffer("增加防区:");	 * 	 * 	 * 	 * // 1.获取用户信息，不同的用户显示不同的信息	 * 	 * Session s = (Session) getRequest().getSession().getAttribute("session");	 * 	 * try {	 * 	 * // 增加防区主信息	 * 	 * zoneManagerService.addMainZoneInfo(zoneBean);	 * 	 * // 跳转增加设备信息页面，需将电子围栏ID和摄像头ID信息集带过去（根据用户级别 0 总公司 1 分公司 2 管理处）	 * 	 * 	 * 	 * 	 * 	 * FenceBean fenceBean = new FenceBean();	 * 	 * 	 * 	 * int lev = 0; if(s!=null){ lev=Integer.valueOf(s.getLev()); }	 * 	 * 	 * 	 * switch (lev) { case 0: hostIDs =	 * 	 * zoneManagerService.getHostIDs(fenceBean); break; case 1:	 * 	 * //参数：分公司ID String branchID =	 * 	 * s.getOrgIdAndNames().getSubCompanys().get(0).getId();	 * 	 * fenceBean.setSubComID(branchID); hostIDs =	 * 	 * zoneManagerService.getHostIDs(fenceBean); break; case 2:	 * 	 * //参数：管理处ID String mID =	 * 	 * s.getOrgIdAndNames().getManagements().get(0).getId();	 * 	 * fenceBean.setMntMentID(mID); hostIDs =	 * 	 * zoneManagerService.getHostIDs(fenceBean); break; }	 * 	 * 	 * 	 * int lev = 0;	 * 	 * if (s != null) {	 * 	 * lev = Integer.valueOf(s.getLev());	 * 	 * }	 * 	 * 	 * 	 * switch (lev) {	 * 	 * case 0:	 * 	 * break;	 * 	 * case 1:	 * 	 * // 参数：分公司ID	 * 	 * String branchID = s.getOrgIdAndNames().getSubCompanys().get(0)	 * 	 * .getId();	 * 	 * paramMap.put("branchID", branchID);	 * 	 * break;	 * 	 * case 2:	 * 	 * // 参数：管理处ID	 * 	 * String mID = s.getOrgIdAndNames().getManagements().get(0)	 * 	 * .getId();	 * 	 * paramMap.put("mngID", mID);	 * 	 * break;	 * 	 * }	 * 	 * 	 * 	 * // 通过机构信息查询摄像头ID	 * 	 * ipcIDs = zoneManagerService.getIpcIDsByOrgID(paramMap);	 * 	 * 	 * 	 * } catch (Exception e) {	 * 	 * log.error("ZoneManagerAction addZone failed:" + e);	 * 	 * 	 * 	 * result = 0;	 * 	 * msg.append("失败！");	 * 	 * // 记录操作日志	 * 	 * operationLogService.createOperationLog("addZone", zoneBean	 * 	 * .getZoneID().toString(), result, msg.toString());	 * 	 * 	 * 	 * return ERROR;	 * 	 * }	 * 	 * 	 * 	 * msg.append("成功！");	 * 	 * // 记录操作日志	 * 	 * operationLogService.createOperationLog("addZone", zoneBean.getZoneID()	 * 	 * .toString(), result, msg.toString());	 * 	 * 	 * 	 * return SUCCESS;	 * 	 * }	 */	/**	 * 	 * 增加防区主信息 zonetype:1 PULSE 2 INTEGRATION 3 DEFENCE 4 POSITION	 * 	 * 查询摄像头信息根据防区所属机构信息	 * 	 * @return	 */	public String addZone() {		Map paramMap = new HashMap();		int result = 1;		StringBuffer msg = new StringBuffer("增加防区:");		try {			// 首先查询该机构下是否有电子围栏可配置,没有则防区不能添加			FenceBean fb = new FenceBean();			fb.setSubComID(zoneBean.getBranchID());			fb.setMntMentID(zoneBean.getMgtID());			List<FenceBean> fbs = fenceManagerService					.getFencesBySubComIdOrMngId(fb);			if (fbs == null || fbs.size() == 0) {				errorMeg = "该机构下没有电子围栏设备,请先添加围栏设备！";				return ERROR;			}			// 将主防区信息增加到缓存中			// zoneManagerService.addMainZoneInfo(zoneBean);			DataCache.getInstance().dataMap.put(zoneBean.getZoneID(), zoneBean);			// 通过机构信息查询摄像头ID			paramMap.put("branchID", zoneBean.getBranchID());			paramMap.put("mngID", zoneBean.getMgtID());			ipcIDs = zoneManagerService.getIpcIDsByOrgID(paramMap);		} catch (Exception e) {			log.error("ZoneManagerAction addZone failed:" + e);			result = 0;			msg.append("失败！");			// 记录操作日志			operationLogService.createOperationLog("addZone", zoneBean			.getZoneID().toString(), result, msg.toString());			errorMeg = "违反数据约束,检查ID是否重复！";			return ERROR;		}		msg.append("成功！");		// 记录操作日志		try {			operationLogService.createOperationLog("addZone", zoneBean.getZoneID()										.toString(), result, msg.toString());		} catch (Exception e) {			log.error("createOperationLog failed when addZone:"+e.getMessage());		}		return SUCCESS;	}	/**	 * 	 * 增加防区所有设备信息（未用）	 */	/*	 * public String addDeviceInfo() {	 * 	 * try {	 * 	 * // 根据zoneID查询防区主信息	 * 	 * int fenceType = zoneBean.getFenceType();	 * 	 * zoneBean = zoneManagerService.getZoneByID(zoneBean.getZoneID());	 * 	 * zoneBean.setFenceType(fenceType);	 * 	 * // 给映射关系对象添加防区ID	 * 	 * if (ipcZoneMaps != null) {	 * 	 * for (IpcZoneMap ipcZoneMap : ipcZoneMaps) {	 * 	 * ipcZoneMap.setZoneID(zoneBean.getZoneID());	 * 	 * }	 * 	 * }	 * 	 * 	 * 	 * switch (zoneBean.getFenceType()) {	 * 	 * 	 * 	 * case 1:// 高压脉冲	 * 	 * pulseZoneMapBean.setZoneID(zoneBean.getZoneID());	 * 	 * pulseZoneMapBean.setHostID(zoneBean.getHostID());	 * 	 * zoneManagerService.addDeviceInfo(zoneBean, pulseZoneMapBean,	 * 	 * ipcZoneMaps);	 * 	 * break;	 * 	 * case 2:// 一体化	 * 	 * integrationZoneMapBean.setZoneID(zoneBean.getZoneID());	 * 	 * integrationZoneMapBean.setHostID(zoneBean.getHostID());	 * 	 * zoneManagerService.addDeviceInfo(zoneBean,	 * 	 * integrationZoneMapBean, ipcZoneMaps);	 * 	 * break;	 * 	 * case 3:// 防区型光纤	 * 	 * defenceZoneMapBean.setZoneID(zoneBean.getZoneID());	 * 	 * defenceZoneMapBean.setHostID(zoneBean.getHostID());	 * 	 * zoneManagerService.addDeviceInfo(zoneBean, defenceZoneMapBean,	 * 	 * ipcZoneMaps);	 * 	 * break;	 * 	 * case 4:// 定位型光纤	 * 	 * positionZoneMapBean.setZoneID(zoneBean.getZoneID());	 * 	 * positionZoneMapBean.setHostID(zoneBean.getHostID());	 * 	 * zoneManagerService.addDeviceInfo(zoneBean, positionZoneMapBean,	 * 	 * ipcZoneMaps);	 * 	 * break;	 * 	 * default:	 * 	 * break;	 * 	 * }	 * 	 * } catch (Exception e) {	 * 	 * log.error("ZoneManagerAction addDeviceInfo failed:" + e);	 * 	 * return ERROR;	 * 	 * }	 * 	 * 	 * 	 * return SUCCESS;	 * 	 * }	 */	/**	 * 	 * 删除防区	 * 	 * 	 * 	 * @return	 */	public String delZone() {		int result = 1;		StringBuffer msg = new StringBuffer("删除防区:");		StringBuffer retMsg = null;		String[] ids = zoneIDs.split(",");		List<ZoneBean> beans = new ArrayList<ZoneBean>();		for (String id : ids) {			try {				ZoneBean z = zoneManagerService				.getZoneByID(Integer.valueOf(id));				beans.add(z);			} catch (Exception e) {								log.error("delZone failed:"+e.getMessage());								result = 0;				msg.append("失败！");				// 记录操作日志				operationLogService.createOperationLog("delZone",				zoneIDs, result, msg.toString());				ajaxObject = new AjaxObject(result, "删除失败");				return ERROR;			}		}		for (ZoneBean zb : beans) {			try {				zoneManagerService.delZone(zb);			} catch (Exception e) {				log.fatal("删除防区号:" + zb.getZoneID() + "失败,原因:" + e.getMessage());				retMsg = new StringBuffer("删除防区:");				retMsg.append(zb.getZoneID() + " ");			}		}		if (retMsg != null) {			result = 0;			msg.append("失败！");			retMsg.append("失败");			// 记录操作日志			operationLogService.createOperationLog("delZone", zoneIDs,			result, msg.toString());			ajaxObject = new AjaxObject(result, retMsg.toString());			return ERROR;		} else {			msg.append("成功！");			// 记录操作日志			try {				operationLogService.createOperationLog("delZone", zoneIDs,												result, msg.toString());			} catch (Exception e) {				log.error("createOperationLog failed when delZone:"+e.getMessage());			}			ajaxObject = new AjaxObject(result, "删除成功");			return SUCCESS;		}	}	/**	 * 	 * 跳转修改防区主信息页面（待用）	 * 	 * 	 * 	 * @return	 */	/*	 * public String goModZone() {	 * 	 * try {	 * 	 * // 查询防区主信息	 * 	 * zoneBean = zoneManagerService.getZoneByID(zoneBean.getZoneID());	 * 	 * } catch (Exception e) {	 * 	 * log.error("ZoneManagerAction addZone failed:" + e);	 * 	 * return ERROR;	 * 	 * }	 * 	 * 	 * 	 * return SUCCESS;	 * 	 * }	 */	/**	 * 	 * 执行修改防区主信息,ajax请求	 */	public String doModZone() {		int result = 1;		StringBuffer msg = new StringBuffer("修改防区:");		try {			zoneManagerService.modMainZoneInfo(zoneBean);			msg.append("成功！");			// 记录操作日志			operationLogService.createOperationLog("doModZone", zoneBean			.getZoneID().toString(), result, msg.toString());			ajaxObject = new AjaxObject(result, null);			return SUCCESS;		} catch (Exception e) {			log.error("doModZone execute failed:========" + e);			result = 0;			msg.append("失败！");			// 记录操作日志			operationLogService.createOperationLog("doModZone", zoneBean			.getZoneID().toString(), result, msg.toString());			ajaxObject = new AjaxObject(result, null);			return ERROR;		}	}	/**	 * 	 * 执行修改防区主信息，并跳转修改设备信息页面，ajax请求	 * 	 * 	 * 	 * @return	 */	/*	 * 	 * public String doModZone() {	 * 	 * 	 * 	 * try { //修改防区主信息 zoneManagerService.modMainZoneInfo(zoneBean);	 * 	 * //查询设备信息(电子围栏和摄像头映射信息) //查询防区电子围栏映射信息 Map<String,Object> map = new	 * 	 * HashMap<String,Object>(); switch (zoneBean.getFenceType()) { case	 * 	 * 1://高压脉冲 pulseZoneMapBean =	 * 	 * zoneManagerService.getPulseZoneMapByZoneID(zoneBean.getZoneID());	 * 	 * map.put("fenceInfo", pulseZoneMapBean); break; case 2://一体化	 * 	 * integrationZoneMapBean	 * 	 * =zoneManagerService.getIntegrationZoneMapByZoneID(zoneBean.getZoneID());	 * 	 * map.put("fenceInfo", integrationZoneMapBean); break; case 3://防区型光纤	 * 	 * defenceZoneMapBean	 * 	 * =zoneManagerService.getDefenceZoneMapByZoneID(zoneBean.getZoneID());	 * 	 * map.put("fenceInfo", defenceZoneMapBean); break; case 4://定位型光纤	 * 	 * positionZoneMapBean	 * 	 * =zoneManagerService.getPositionZoneMapByZoneID(zoneBean.getZoneID());	 * 	 * map.put("fenceInfo", positionZoneMapBean); break; } //查询摄像头信息 ipcZoneMaps	 * 	 * = zoneManagerService.getIpcZoneMapsByZoneID(zoneBean.getZoneID());	 * 	 * map.put("ipcs", ipcZoneMaps); //ajax返回，json格式	 * 	 * 	 * 	 * } catch (Exception e) {	 * 	 * log.error("ZoneManagerAction doModZone failed:"+e); }	 * 	 * 	 * 	 * 	 * 	 * return null;	 * 	 * 	 * 	 * }	 */	/**	 * 	 * 修改围栏映射信息 参数：防区id和围栏映射关系信息	 */	public String updateFenceMapInfo() {		int result = 1;		StringBuffer msg = new StringBuffer("修改电子围栏映射:");		try {			// 通过防区id获取防区信息			zoneBean = zoneManagerService.getZoneByID(zoneBean.getZoneID());			switch (zoneBean.getFenceType()) {			case 1:// 高压脉冲				pulseZoneMapBean.setZoneID(zoneBean.getZoneID());				zoneManagerService.updateFenceMapInfo(zoneBean,				pulseZoneMapBean);				break;			case 2:// 一体化				integrationZoneMapBean.setZoneID(zoneBean.getZoneID());				zoneManagerService.updateFenceMapInfo(zoneBean,				integrationZoneMapBean);				break;			case 3:// 防区型光纤				defenceZoneMapBean.setZoneID(zoneBean.getZoneID());				zoneManagerService.updateFenceMapInfo(zoneBean,				defenceZoneMapBean);				break;			case 4:// 定位型光纤				positionZoneMapBean.setZoneID(zoneBean.getZoneID());				zoneManagerService.updateFenceMapInfo(zoneBean,				positionZoneMapBean);				break;			}		} catch (Exception e) {			log.error("ZoneManagerAction doModZone failed:" + e);			result = 0;			msg.append("失败！");			// 记录操作日志			operationLogService.createOperationLog("updateFenceMapInfo",			zoneBean.getZoneID().toString(), result, msg.toString());			ajaxObject = new AjaxObject(result, "修改失败");			return ERROR;		}		msg.append("成功！");		// 记录操作日志		try {			operationLogService.createOperationLog("updateFenceMapInfo", zoneBean										.getZoneID().toString(), result, msg.toString());		} catch (Exception e) {						log.error("createOperationLog failed when updateFenceMapInfo:"+e.getMessage());				}		ajaxObject = new AjaxObject(1, null);		return SUCCESS;	}	/**	 * 	 * 修改摄像头映射信息 通过防区ID和摄像头id	 */	/*	 * public String updateIpcMapInfo() {	 * 	 * 	 * 	 * int result = 1;	 * 	 * StringBuffer msg = new StringBuffer("修改摄像头映射:");	 * 	 * 	 * 	 * try {	 * 	 * zoneManagerService.updateIpcMapInfo(ipcZoneMap);	 * 	 * } catch (Exception e) {	 * 	 * e.printStackTrace();	 * 	 * 	 * 	 * result = 0;	 * 	 * msg.append("失败！");	 * 	 * // 记录操作日志	 * 	 * operationLogService.createOperationLog("updateIpcMapInfo",	 * 	 * ipcZoneMap.getIpcId(), result, msg.toString());	 * 	 * 	 * 	 * ajaxObject = new AjaxObject(result, null);	 * 	 * return ERROR;	 * 	 * }	 * 	 * 	 * 	 * msg.append("成功！");	 * 	 * // 记录操作日志	 * 	 * operationLogService.createOperationLog("updateIpcMapInfo",	 * 	 * ipcZoneMap.getIpcId(), result, msg.toString());	 * 	 * 	 * 	 * ajaxObject = new AjaxObject(result, null);	 * 	 * return SUCCESS;	 * 	 * }	 */	/**	 * 	 * 执行修改所有设备信息（未用）	 */	/*	 * public String doModDeviceInfo() {	 * 	 * 	 * 	 * try {	 * 	 * 	 * 	 * // 给映射关系对象添加防区ID	 * 	 * if (ipcZoneMaps != null) {	 * 	 * for (IpcZoneMap ipcZoneMap : ipcZoneMaps) {	 * 	 * ipcZoneMap.setZoneID(zoneBean.getZoneID());	 * 	 * }	 * 	 * }	 * 	 * 	 * 	 * switch (zoneBean.getFenceType()) {	 * 	 * 	 * 	 * case 1:// 高压脉冲	 * 	 * pulseZoneMapBean.setZoneID(zoneBean.getZoneID());	 * 	 * zoneManagerService.modZone(zoneBean, pulseZoneMapBean,	 * 	 * ipcZoneMaps);	 * 	 * break;	 * 	 * case 2:// 一体化	 * 	 * integrationZoneMapBean.setZoneID(zoneBean.getZoneID());	 * 	 * zoneManagerService.modZone(zoneBean, integrationZoneMapBean,	 * 	 * ipcZoneMaps);	 * 	 * break;	 * 	 * case 3:// 防区型光纤	 * 	 * defenceZoneMapBean.setZoneID(zoneBean.getZoneID());	 * 	 * zoneManagerService.modZone(zoneBean, defenceZoneMapBean,	 * 	 * ipcZoneMaps);	 * 	 * break;	 * 	 * case 4:// 定位型光纤	 * 	 * positionZoneMapBean.setZoneID(zoneBean.getZoneID());	 * 	 * zoneManagerService.modZone(zoneBean, positionZoneMapBean,	 * 	 * ipcZoneMaps);	 * 	 * break;	 * 	 * }	 * 	 * } catch (Exception e) {	 * 	 * log.error("ZoneManagerAction doModZone failed:" + e);	 * 	 * }	 * 	 * 	 * 	 * return null;	 * 	 * }	 */	/**	 * 	 * 撤/布防	 * 	 * 	 * 	 * @return	 */	public String zoneCtrl() {		int result = 1;		StringBuffer msg = new StringBuffer("撤/布防区:");		try {			zoneManagerService.zoneCtrl(zoneBean);		} catch (Exception e) {			String retMsg = "";			if (zoneBean.getStatus().equals(0)) {				retMsg = "撤防失败";			} else {				retMsg = "布防失败";			}			result = 0;			msg.append("失败！");			// 记录操作日志			operationLogService.createOperationLog("zoneCtrl", zoneBean			.getZoneID().toString(), result, msg.toString());			log.error("ZoneManagerAction zoneCtrl failed:" + e.getMessage());			ajaxObject = new AjaxObject(result, retMsg);			return ERROR;		}		msg.append("成功！");		// 记录操作日志		try {			operationLogService.createOperationLog("zoneCtrl", zoneBean										.getZoneID().toString(), result, msg.toString());		} catch (Exception e) {						log.error("createOperationLog failed when zoneCtrl:"+e.getMessage());		}		ajaxObject = new AjaxObject(result, null);		return SUCCESS;	}	/**	 * 	 * excel批量导入	 * 	 * 	 * 	 * @return	 */	public String batchImportZone() {		int result = 1;		StringBuffer msg = new StringBuffer("批量导入防区:");		try {			log.info("begin excute ExcelUtil.readExcel.fileName:"			+ zoneFileName);			errorMessage = new HashMap<String, Object>();			// excel解析容器			// 存放所有表数据大集合			Map<String, List<List<Object>>> zoneInfos = ExcelMutilSheetUtil			.readExcel(zone, zoneFileName, errorMessage);			// 解析excel文件有错误则直接返回			if (errorMessage.size() > 0) {				result = 0;				msg.append("文件格式错误！");				// 记录操作日志				operationLogService.createOperationLog("batchImportZone",				zoneFileName, result, msg.toString());				ajaxObject = new AjaxObject(result, errorMessage);				return ERROR;			}			// 封装各个文件信息为集合对象			// 主防区信息集合，使用map剔除重复主键信息			Map<Integer, List<Object>> zones = new LinkedHashMap<Integer, List<Object>>();			List<List<Object>> list = zoneInfos			.get(ExcelConfigInfo.ZONE_DATA_NAME);			if (list != null) {				for (List<Object> zoneList : list) {					zones.put(Integer.valueOf((String) zoneList.get(0)),					zoneList);				}			}			List<ZoneBean> zoneBeans = null;// 主防区对象集合			if (zones.size() > 0) {				zoneBeans = ZoneConvertUtil.getZones(zones);			}			// 防区型映射信息集合			List<List<Object>> defenceList = zoneInfos			.get(ExcelConfigInfo.ZONE_DEFENCE_DATA_NAME);			List<DefenceZoneMapBean> defenceZoneMapBeans = null;// 防区型映射对象集合			if (defenceList != null && defenceList.size() > 0) {				defenceZoneMapBeans = ZoneConvertUtil				.getDefenceZoneMaps(defenceList);			}			// 定位型映射信息集合			List<List<Object>> positionList = zoneInfos			.get(ExcelConfigInfo.ZONE_POSITION_DATA_NAME);			List<PositionZoneMapBean> positionZoneMapBeans = null;// 定位型映射对象集合			if (positionList != null && positionList.size() > 0) {				positionZoneMapBeans = ZoneConvertUtil				.getPositionZoneMaps(positionList);			}			// 一体化映射信息集合			List<List<Object>> integrationList = zoneInfos			.get(ExcelConfigInfo.ZONE_INTE_DATA_NAME);			List<IntegrationZoneMapBean> integrationZoneMapBeans = null;// 一体化映射对象集合			if (integrationList != null && integrationList.size() > 0) {				integrationZoneMapBeans = ZoneConvertUtil				.getIntegrationZoneMaps(integrationList);			}			// 高压脉冲映射信息集合			List<List<Object>> pulseList = zoneInfos			.get(ExcelConfigInfo.ZONE_PULSE_DATA_NAME);			List<PulseZoneMapBean> pulseZoneMapBeans = null;// 高压脉冲映射对象集合			if (pulseList != null && pulseList.size() > 0) {				pulseZoneMapBeans = ZoneConvertUtil.getPulseZoneMaps(pulseList);			}			// 摄像头映射信息集合			List<List<Object>> ipcList = zoneInfos			.get(ExcelConfigInfo.ZONE_IPC_DATA_NAME);			List<IpcZoneMap> ipcZoneMapBeans = null;// 摄像头映射对象集合			if (ipcList != null && ipcList.size() > 0) {				ipcZoneMapBeans = ZoneConvertUtil.getIpcZoneMaps(ipcList);			}			// 音频映射信息集合			/*List<List<Object>> soundList = zoneInfos			.get(ExcelConfigInfo.ZONE_SOUND_DATA_NAME);			List<SoundZoneMap> soundZoneMapBeans = null;// 音频映射对象集合			if (soundList != null && soundList.size() > 0) {				soundZoneMapBeans = ZoneConvertUtil.getSoundZoneMaps(soundList);			}*/			// 获取数据库中所有的zoneID			List<Integer> zoneIDs = zoneManagerService.getAllZoneID();			// 创建容器，用于存放插入失败的信息			List<String> zoneErrRows = new ArrayList<String>();			List<String> defenceErrRows = new ArrayList<String>();			List<String> positionErrRows = new ArrayList<String>();			List<String> integrationErrRows = new ArrayList<String>();			List<String> pulseErrRows = new ArrayList<String>();			List<String> ipcErrRows = new ArrayList<String>();			//List<String> soundErrRows = new ArrayList<String>();			// 判断文件传过来的zoneID是否已在数据库中存在，存在则不执行添加操作。进行主防区信息添加			if (zoneBeans != null) {				int counter = 1;				for (ZoneBean zoneBean : zoneBeans) {					counter++;					try {						if (zoneIDs != null) {							if (!zoneIDs.contains(zoneBean.getZoneID())) {								zoneManagerService.addMainZoneInfo(zoneBean);							}						} else {							zoneManagerService.addMainZoneInfo(zoneBean);						}					} catch (Exception e) {						log.error("addMainZoneInfo failed:=========="								+ e.getMessage());						zoneErrRows.add("防区信息:第"+counter+"行:数据存储错误\r\n");					}				}			}			// 映射关系的添加			if (defenceZoneMapBeans != null) {				int counter = 1;				for (DefenceZoneMapBean defenceZoneMapBean : defenceZoneMapBeans) {					counter++;					try {						// 判断映射关系是否已经存在，根据防区ID和围栏主机ID						DefenceZoneMapBean dzb = zoneManagerService						.getDefenceZoneMapByZoneIdAndHostId(defenceZoneMapBean);						if (dzb == null){							//根据zoneID查询防区信息							ZoneBean zb =zoneManagerService.getZoneByID(defenceZoneMapBean.getZoneID());							if(zb==null){								defenceErrRows.add("防区型光纤:第"+counter+"行:映射防区不存在\r\n");								continue;							}							FenceBean f= new FenceBean();							f.setHostID(defenceZoneMapBean.getHostID());							f=fenceManagerService.getFenceByID(f);							if(f==null){								defenceErrRows.add("防区型光纤:第"+counter+"行:映射围栏主机不存在\r\n");								continue;							}							if(!(zb.getMgtID().equals(f.getMntMentID()))){								defenceErrRows.add("防区型光纤:第"+counter+"行:防区和围栏主机不在同一管理处\r\n");								continue;							}							if(!(f.getFenceType().equals(3))){								defenceErrRows.add("防区型光纤:第"+counter+"行:围栏主机不是防区型振动光纤\r\n");								continue;							}							zb.setFenceType(3);							zoneManagerService.addDeviceInfo(zb, defenceZoneMapBean,									null,true);						}else{							defenceErrRows.add("防区型光纤:第"+counter+"行:已存在该映射信息\r\n");						}					} catch (Exception e) {						defenceErrRows.add("防区型光纤:第"+counter+"行:数据存储错误\r\n");						// 删除上一步增加的基本信息						zoneManagerService.delZoneBasicInfo(defenceZoneMapBean								.getZoneID());						log.error("addDefenceZoneMap failed:========="								+ e.getMessage());					}				}			}			if (positionZoneMapBeans != null) {				int counter = 1;				for (PositionZoneMapBean positionZoneMapBean : positionZoneMapBeans) {					counter++;					try {						// 判断映射关系是否已经存在，根据防区ID和围栏主机ID						PositionZoneMapBean pzb = zoneManagerService								.getPositionZoneMapByZoneIdAndHostId(positionZoneMapBean);						if (pzb == null){							//根据zoneID查询防区信息							ZoneBean zb =zoneManagerService.getZoneByID(positionZoneMapBean.getZoneID());							if(zb==null){								positionErrRows.add("定位型光纤:第"+counter+"行:映射防区不存在\r\n");								continue;							}							FenceBean f= new FenceBean();							f.setHostID(positionZoneMapBean.getHostID());							f=fenceManagerService.getFenceByID(f);							if(f==null){								positionErrRows.add("定位型光纤:第"+counter+"行:映射围栏主机不存在\r\n");								continue;							}							if(!(zb.getMgtID().equals(f.getMntMentID()))){								positionErrRows.add("定位型光纤:第"+counter+"行:防区和围栏主机不在同一管理处\r\n");								continue;							}							if(!(f.getFenceType().equals(4))){								positionErrRows.add("定位型光纤:第"+counter+"行:围栏主机不是定位型振动光纤\r\n");								continue;							}							zb.setFenceType(4);							zoneManagerService.addDeviceInfo(zb, positionZoneMapBean,									null,true);						}else{							positionErrRows.add("定位型光纤:第"+counter+"行:已存在该映射信息\r\n");						}					} catch (Exception e) {						positionErrRows.add("定位型光纤:第"+counter+"行:数据存储错误\r\n");						// 删除上一步增加的基本信息						zoneManagerService.delZoneBasicInfo(positionZoneMapBean								.getZoneID());						log.error("addPositionZoneMap failed:========="								+ e.getMessage());					}				}			}			if (integrationZoneMapBeans != null) {				int counter = 1;				for (IntegrationZoneMapBean integrationZoneMapBean : integrationZoneMapBeans) {					counter++;					try {						// 判断映射关系是否已经存在，根据防区ID和围栏主机ID						IntegrationZoneMapBean izb = zoneManagerService								.getIntegrationZoneMapByZoneIdAndHostId(integrationZoneMapBean);						if (izb == null){							//根据zoneID查询防区信息							ZoneBean zb =zoneManagerService.getZoneByID(integrationZoneMapBean.getZoneID());							if(zb==null){								integrationErrRows.add("一体化光纤:第"+counter+"行:映射防区不存在\r\n");								continue;							}							FenceBean f= new FenceBean();							f.setHostID(integrationZoneMapBean.getHostID());							f=fenceManagerService.getFenceByID(f);							if(f==null){								integrationErrRows.add("一体化光纤:第"+counter+"行:映射围栏主机不存在\r\n");								continue;							}							if(!(zb.getMgtID().equals(f.getMntMentID()))){								integrationErrRows.add("一体化光纤:第"+counter+"行:防区和围栏主机不在同一管理处\r\n");								continue;							}							if(!(f.getFenceType().equals(2))){								integrationErrRows.add("一体化光纤:第"+counter+"行:围栏主机不是一体化型振动光纤\r\n");								continue;							}							zb.setFenceType(2);							zoneManagerService.addDeviceInfo(zb, integrationZoneMapBean,									null,true);						}else{							integrationErrRows.add("一体化光纤:第"+counter+"行:已存在该映射信息\r\n");						}					} catch (Exception e) {						integrationErrRows.add("一体化光纤:第"+counter+"行:数据存储错误\r\n");						// 删除上一步增加的基本信息						zoneManagerService								.delZoneBasicInfo(integrationZoneMapBean										.getZoneID());						log.error("addIntegrationZoneMap failed:========="								+ e.getMessage());					}				}			}			if (pulseZoneMapBeans != null) {				int counter = 1;				for (PulseZoneMapBean pulseZoneMapBean : pulseZoneMapBeans) {					counter++;					try {						// 判断映射关系是否已经存在，根据防区ID和围栏主机ID						PulseZoneMapBean pzb = zoneManagerService						.getPulseZoneMapByZoneIdAndHostId(pulseZoneMapBean);						if (pzb == null){							//根据zoneID查询防区信息							ZoneBean zb =zoneManagerService.getZoneByID(pulseZoneMapBean.getZoneID());							if(zb==null){								pulseErrRows.add("高压脉冲光纤:第"+counter+"行:映射防区不存在\r\n");								continue;							}							FenceBean f= new FenceBean();							f.setHostID(pulseZoneMapBean.getHostID());							f=fenceManagerService.getFenceByID(f);							if(f==null){								pulseErrRows.add("高压脉冲光纤:第"+counter+"行:映射围栏主机不存在\r\n");								continue;							}							if(!(zb.getMgtID().equals(f.getMntMentID()))){								pulseErrRows.add("高压脉冲光纤:第"+counter+"行:防区和围栏主机不在同一管理处\r\n");								continue;							}							if(!(f.getFenceType().equals(1))){								pulseErrRows.add("高压脉冲光纤:第"+counter+"行:围栏主机不是高压脉冲型振动光纤\r\n");								continue;							}							zb.setFenceType(1);							zoneManagerService.addDeviceInfo(zb, pulseZoneMapBean,									null,true);						}else{							pulseErrRows.add("高压脉冲光纤:第"+counter+"行:已存在该映射信息\r\n");						}					} catch (Exception e) {						pulseErrRows.add("高压脉冲光纤:第"+counter+"行:数据存储错误\r\n");						// 删除上一步增加的基本信息						zoneManagerService.delZoneBasicInfo(pulseZoneMapBean								.getZoneID());						log.error("addPulseZoneMap failed:========="								+ e.getMessage());					}				}			}			if (ipcZoneMapBeans != null) {				int counter = 1;				for (IpcZoneMap ipcZoneMap : ipcZoneMapBeans) {					counter++;					try {						// 判断映射关系是否已经存在，根据防区ID和IPCID						IpcZoneMap im = zoneManagerService						.getIpcZoneMapByZoneIdAndIpcId(ipcZoneMap);						if (im == null){							//根据zoneID查询防区信息							ZoneBean zb =zoneManagerService.getZoneByID(ipcZoneMap.getZoneID());							if(zb==null){								ipcErrRows.add("摄像头映射信息:第"+counter+"行:映射防区不存在\r\n");								continue;							}							TVmIpc tvmIpc = deviceManageIPCService.searchById(ipcZoneMap.getIpcId());							if(tvmIpc == null){								ipcErrRows.add("摄像头映射信息:第"+counter+"行:映射摄像头不存在\r\n");								continue;							}							if(!(zb.getMgtID().equals(tvmIpc.getManagementagency()))){								ipcErrRows.add("摄像头映射信息:第"+counter+"行:防区和摄像头不在同一管理处\r\n");								continue;							}							if(ipcZoneMap.getMainIpc().equals(1)){								Map<String,Integer> param = new HashMap<String,Integer>();								param.put("mainIpc", ipcZoneMap.getMainIpc());								param.put("zoneID", ipcZoneMap.getZoneID());								if(zoneManagerService.getCountMainIpcByZoneId(param)>0){									ipcErrRows.add("摄像头映射信息:第"+counter+"行:防区已存在主摄像设备,请添加辅设备\r\n");									continue; 								}							}							zoneManagerService.addIpcInfo(ipcZoneMap);						}else{							ipcErrRows.add("摄像头映射信息:第"+counter+"行:已存在该映射信息\r\n");						}					} catch (Exception e) {						ipcErrRows.add("摄像头映射信息:第"+counter+"行:数据存储错误\r\n");						log.error("addIpcZoneMap failed:========="								+ e.getMessage());					}				}			}			/*if (soundZoneMapBeans != null) {				int counter = 1;				for (SoundZoneMap soundZoneMap : soundZoneMapBeans) {					counter++;					try {						// 判断映射关系是否已经存在，根据防区ID和音频ID						SoundZoneMap szm = zoneManagerService						.getSoundZoneMapByZoneIdAndAudioId(soundZoneMap);						if (szm == null){							//根据zoneID查询防区信息							ZoneBean zb =zoneManagerService.getZoneByID(soundZoneMap.getZoneID());							if(zb==null){								soundErrRows.add("音频映射信息:第"+counter+"行:映射防区不存在\r\n");								continue;							}							SoundDev soundDev=(SoundDev)soundDevservice.queryById(soundZoneMap.getAudioID());							if(soundDev == null){								soundErrRows.add("音频映射信息:第"+counter+"行:映射音频不存在\r\n");								continue;							}							if(!(zb.getMgtID().equals(soundDev.getMgtCode()))){								soundErrRows.add("音频映射信息:第"+counter+"行:防区和音频不在同一管理处\r\n");								continue;							}							zoneManagerService.addSoundZoneMap(soundZoneMap);						}else{							soundErrRows.add("音频映射信息:第"+counter+"行:已存在该映射信息\r\n");						}					} catch (Exception e) {						soundErrRows.add("音频映射信息:第"+counter+"行:数据存储错误\r\n");						log.error("addSoundZoneMap failed:========="								+ e.getMessage());					}				}			}*/			// 数据插入时是否有错			if (zoneErrRows.size() > 0) {				errorMessage.put(ExcelConfigInfo.ZONE_DATA_ERROR, zoneErrRows);			}			if (defenceErrRows.size() > 0) {				errorMessage.put(ExcelConfigInfo.ZONE_DEFENCE_DATA_ERROR,				defenceErrRows);			}			if (positionErrRows.size() > 0) {				errorMessage.put(ExcelConfigInfo.ZONE_POSITION_DATA_ERROR,				positionErrRows);			}			if (integrationErrRows.size() > 0) {				errorMessage.put(ExcelConfigInfo.ZONE_INTE_DATA_ERROR,				integrationErrRows);			}			if (pulseErrRows.size() > 0) {				errorMessage.put(ExcelConfigInfo.ZONE_PULSE_DATA_ERROR,				pulseErrRows);			}			if (ipcErrRows.size() > 0) {				errorMessage.put(ExcelConfigInfo.ZONE_IPC_DATA_ERROR,				ipcErrRows);			}			/*if (soundErrRows.size() > 0) {				errorMessage.put(ExcelConfigInfo.ZONE_SOUND_DATA_ERROR,				soundErrRows);			}*/			// excel文件批量插入数据库有误			if (errorMessage.size() > 0) {				result = 0;				msg.append("批量数据插入数据库异常！");				// 记录操作日志				operationLogService.createOperationLog("batchImportZone",				zoneFileName, result, msg.toString());				ajaxObject = new AjaxObject(result, errorMessage);				return ERROR;			}		} catch (Exception e) {			e.printStackTrace();			log.error("ZoneManagerAction batchImportFence failed:"					+ e.getMessage());			result = 0;			msg.append("失败！");			// 记录操作日志			operationLogService.createOperationLog("batchImportZone",			zoneFileName, result, msg.toString());			ajaxObject = new AjaxObject(result, null);			return ERROR;		}		msg.append("成功！");		// 记录操作日志		operationLogService.createOperationLog("batchImportZone", zoneFileName,		result, msg.toString());		ajaxObject = new AjaxObject(result, null);		return SUCCESS;	}	public IZoneService getZoneManagerService() {		return zoneManagerService;	}	public void setZoneManagerService(IZoneService zoneManagerService) {		this.zoneManagerService = zoneManagerService;	}	public ZoneBean getZoneBean() {		return zoneBean;	}	public void setZoneBean(ZoneBean zoneBean) {		this.zoneBean = zoneBean;	}	public File getZone() {		return zone;	}	public void setZone(File zone) {		this.zone = zone;	}	public String getZoneFileName() {		return zoneFileName;	}	public void setZoneFileName(String zoneFileName) {		this.zoneFileName = zoneFileName;	}	public String getZoneContentType() {		return zoneContentType;	}	public void setZoneContentType(String zoneContentType) {		this.zoneContentType = zoneContentType;	}	public DefenceZoneMapBean getDefenceZoneMapBean() {		return defenceZoneMapBean;	}	public void setDefenceZoneMapBean(DefenceZoneMapBean defenceZoneMapBean) {		this.defenceZoneMapBean = defenceZoneMapBean;	}	public IntegrationZoneMapBean getIntegrationZoneMapBean() {		return integrationZoneMapBean;	}	public void setIntegrationZoneMapBean(	IntegrationZoneMapBean integrationZoneMapBean) {		this.integrationZoneMapBean = integrationZoneMapBean;	}	public PositionZoneMapBean getPositionZoneMapBean() {		return positionZoneMapBean;	}	public void setPositionZoneMapBean(PositionZoneMapBean positionZoneMapBean) {		this.positionZoneMapBean = positionZoneMapBean;	}	public PulseZoneMapBean getPulseZoneMapBean() {		return pulseZoneMapBean;	}	public void setPulseZoneMapBean(PulseZoneMapBean pulseZoneMapBean) {		this.pulseZoneMapBean = pulseZoneMapBean;	}	public Map<String, Object> getErrorMessage() {		return errorMessage;	}	public void setErrorMessage(Map<String, Object> errorMessage) {		this.errorMessage = errorMessage;	}	public List<IpcZoneMap> getIpcZoneMaps() {		return ipcZoneMaps;	}	public void setIpcZoneMaps(List<IpcZoneMap> ipcZoneMaps) {		this.ipcZoneMaps = ipcZoneMaps;	}	public Map<String, Object> getInsertErrorMsg() {		return insertErrorMsg;	}	public void setInsertErrorMsg(Map<String, Object> insertErrorMsg) {		this.insertErrorMsg = insertErrorMsg;	}	public List<String> getHostIDs() {		return hostIDs;	}	public void setHostIDs(List<String> hostIDs) {		this.hostIDs = hostIDs;	}	public List<String> getIpcIDs() {		return ipcIDs;	}	public void setIpcIDs(List<String> ipcIDs) {		this.ipcIDs = ipcIDs;	}	public List<AlarmDTO> getAlarms() {		return alarms;	}	public void setAlarms(List<AlarmDTO> alarms) {		this.alarms = alarms;	}	public Page<ZoneBean> getPage() {		return page;	}	public void setPage(Page<ZoneBean> page) {		this.page = page;	}	public String getZoneIDs() {		return zoneIDs;	}	public void setZoneIDs(String zoneIDs) {		this.zoneIDs = zoneIDs;	}	public AjaxObject getAjaxObject() {		return ajaxObject;	}	public void setAjaxObject(AjaxObject ajaxObject) {		this.ajaxObject = ajaxObject;	}	public String getJsonStr() {		return jsonStr;	}	public void setJsonStr(String jsonStr) {		this.jsonStr = jsonStr;	}	public IpcZoneMap getIpcZoneMap() {		return ipcZoneMap;	}	public void setIpcZoneMap(IpcZoneMap ipcZoneMap) {		this.ipcZoneMap = ipcZoneMap;	}	public IOperationLogService getOperationLogService() {		return operationLogService;	}	public void setOperationLogService(IOperationLogService operationLogService) {		this.operationLogService = operationLogService;	}	public IFenceService getFenceManagerService() {		return fenceManagerService;	}	public void setFenceManagerService(IFenceService fenceManagerService) {		this.fenceManagerService = fenceManagerService;	}	public String getErrorMeg() {		return errorMeg;	}	public void setErrorMeg(String errorMeg) {		this.errorMeg = errorMeg;	}	public DeviceManageIPCService getDeviceManageIPCService() {		return deviceManageIPCService;	}	public void setDeviceManageIPCService(			DeviceManageIPCService deviceManageIPCService) {		this.deviceManageIPCService = deviceManageIPCService;	}	public ISoundDevservice getSoundDevservice() {		return soundDevservice;	}	public void setSoundDevservice(ISoundDevservice soundDevservice) {		this.soundDevservice = soundDevservice;	}}