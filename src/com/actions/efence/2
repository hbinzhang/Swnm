package com.actions.efence;



import java.io.File;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import com.actions.BaseAction;
import com.entity.efence.FenceBean;
import com.service.efence.IFenceService;
import com.util.fence.ExcelUtil;
import com.util.fence.FenceConvertUtil;

public class FenceManagerAction extends BaseAction{
	
	private final static Log log = LogFactory
			.getLog(FenceManagerAction.class);
	
	private IFenceService fenceManagerService;
	private FenceBean fenceBean;
	private List<FenceBean> fenceBeans;
	private File fence;
	private String fenceFileName;
	private String fenceContentType;
	//分公司集合
	
	//管理处集合
	
	//存放excel文件出错的行数
	Map<String,Object> errorMessage;
	/**
	 * 根据id查询围栏详细信息
	 */
	public String queryDetailByID(){
		
		try {
			fenceBean = fenceManagerService.getFenceByID(fenceBean);
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return SUCCESS;
	}
	
	/**
	 * 查询页面
	 */
	public String queryFence(){
		//1.获取用户信息，不同的用户显示不同的信息
		//User user = (User)getRequest().getSession().getAttribute("user");
		/**
		 * 2.根据用户信息查询公司信息和管理处信息：
		 * 总公司用户：查询所有分公司和所有管理处
		 * 分公司用户：查询分公司和分公司所属所有管理处
		 * 管理处用户：管理处所在分公司和本管理处
		 */
		
		//3.查询围栏信息
	     try {
	        	
	 		page.setObjCondition(fenceBean);
	 		
	 		page = fenceManagerService.queryFenceByPage(page);
	 		
	 		} catch (Exception e) {
	 			System.out.println(e);
	 		}
		
		return SUCCESS;
	}
	/**
	 * 新增
	 * @return
	 */
	public String addFence(){
		
		fenceBean.setInstallTime(new Date());
		
		int flag;
		try {
			flag = fenceManagerService.addFence(fenceBean);
		} catch (Exception e) {
			log.error("FenceManagerAction addFence failed:"+e);
			return ERROR;
		}
		if(flag==0){
			return SUCCESS;
		}else{
			return ERROR;
		}
	}
	/**
	 * 删除
	 * @return
	 */
	public String delFence(){
		int flag;
		try {
			flag = fenceManagerService.delFence(fenceBean.getHostID());
		} catch (Exception e) {
			log.error("FenceManagerAction delFence failed:"+e);
			return ERROR;
		}
		if(flag==0){
			return SUCCESS;
		}else{
			return ERROR;
		}
	}
	/**
	 * 跳转更新页面
	 * @return
	 */
	public String goModFence(){
		
		try {
			fenceBean = fenceManagerService.getFenceByID(fenceBean);
		} catch (Exception e) {
			log.error("FenceManagerAction goModFence error:"+e);
			e.printStackTrace();
			return ERROR;
		}
		
		return SUCCESS;
	}
	/**
	 * 执行更新
	 * @return
	 */
	public String doModFence(){
		
		int flag;
		try {
			flag = fenceManagerService.modFence(fenceBean);
		} catch (Exception e) {
			log.error("FenceManagerAction doModFence failed:"+e);
			return ERROR;
		}
		if(flag==0){
			return SUCCESS;
		}else{
			return ERROR;
		}
		
	}
	/**
	 * 批量导入
	 * @return
	 */
	public String batchImportFence(){
		
		try {
			log.info("begin excute ExcelUtil.readExcel.fileName:"+fenceFileName);
			
			errorMessage = new HashMap<String,Object>();
			
			Map<Integer,List<Object>> fences = ExcelUtil.readExcel(fence,fenceFileName,errorMessage);
			
			//解析excel文件有错误则直接返回
			if(errorMessage.size()>0)
				return SUCCESS;
			//将excel文件信息封装成FenceBean对象集合
			List<FenceBean> fenceList = null;
			if(fences!=null&&fences.size()>0){
				
				fenceList= FenceConvertUtil.getFences(fences);
			}
			
			//获取数据库中所有的hostid
			List<Integer> hostIDs = fenceManagerService.getAllFenceHostID();
			
			//判断文件传过来的hostid是否已在数据库中存在，存在则不执行添加操作。
			if(fenceList!=null){
				
				for(FenceBean fence:fenceList){
					if(hostIDs!=null){
						if(!hostIDs.contains(fence.getHostID())){
							fenceManagerService.addFence(fence);
						}
					}else{
						fenceManagerService.addFence(fence);
					}
				}
			}
			
		} catch (Exception e) {
			e.printStackTrace();
			log.error("FenceManagerAction batchImportFence failed:"+e);
		}
		
		return SUCCESS;
	}
	
 
	public IFenceService getFenceManagerService() {
		return fenceManagerService;
	}

	public void setFenceManagerService(IFenceService fenceManagerService) {
		this.fenceManagerService = fenceManagerService;
	}

	public FenceBean getFenceBean() {
		return fenceBean;
	}

	public void setFenceBean(FenceBean fenceBean) {
		this.fenceBean = fenceBean;
	}
	public List<FenceBean> getFenceBeans() {
		return fenceBeans;
	}
	public void setFenceBeans(List<FenceBean> fenceBeans) {
		this.fenceBeans = fenceBeans;
	}
	public File getFence() {
		return fence;
	}
	public void setFence(File fence) {
		this.fence = fence;
	}
	public String getFenceFileName() {
		return fenceFileName;
	}
	public void setFenceFileName(String fenceFileName) {
		this.fenceFileName = fenceFileName;
	}
	public String getFenceContentType() {
		return fenceContentType;
	}
	public void setFenceContentType(String fenceContentType) {
		this.fenceContentType = fenceContentType;
	}
	public Map<String, Object> getErrorMessage() {
		return errorMessage;
	}
	public void setErrorMessage(Map<String, Object> errorMessage) {
		this.errorMessage = errorMessage;
	}
	
}
